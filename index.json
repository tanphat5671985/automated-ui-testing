{
  "stats": {
    "suites": 7,
    "tests": 111,
    "passes": 81,
    "pending": 0,
    "failures": 30,
    "testsRegistered": 111,
    "passPercent": 72.97297297297297,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2024-08-05T05:24:30.297Z",
    "end": "2024-08-05T05:42:01.386Z",
    "duration": 1051089
  },
  "results": [
    {
      "uuid": "b306dda9-02d1-4e2e-977f-cc247cf6dc79",
      "title": "",
      "fullFile": "cypress\\e2e\\cart.feature",
      "file": "cypress\\e2e\\cart.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
          "title": "Check all element at the cart screen",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the header displays correctly",
              "fullTitle": "Check all element at the cart screen Verify that the header displays correctly",
              "timedOut": null,
              "duration": 4228,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a0ea6a35-8515-44ca-b990-f9e614994e1f",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to Home Page by clicking the logo/brand at the header",
              "fullTitle": "Check all element at the cart screen Verify that the user can redirect to Home Page by clicking the logo/brand at the header",
              "timedOut": null,
              "duration": 4066,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "849c6909-61ea-4da5-b6fa-2e11b048b765",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the item in the navbar is highlighted when the user hover",
              "fullTitle": "Check all element at the cart screen Verify that the item in the navbar is highlighted when the user hover",
              "timedOut": null,
              "duration": 3166,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "04089e70-4682-4e33-9774-10e9109c0eb7",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the footer displays correctly at the bottom",
              "fullTitle": "Check all element at the cart screen Verify that the footer displays correctly at the bottom",
              "timedOut": null,
              "duration": 2969,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "033ad39d-8bc8-4f8e-877e-d5a58d7be043",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the information on the 3 columns footer displayed accurately",
              "fullTitle": "Check all element at the cart screen Verify that the information on the 3 columns footer displayed accurately",
              "timedOut": null,
              "duration": 2556,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ce2f039e-3f0e-4bce-bd7a-a1f3fb4f5e4f",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user can NOT click any item on the footer",
              "fullTitle": "Check all element at the cart screen Verify user can NOT click any item on the footer",
              "timedOut": null,
              "duration": 3214,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c2341444-a71d-4fca-99a2-a357dab1d2a3",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the UI elements display correctly when switch to Cart screen and the cart has a product (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the UI elements display correctly when switch to Cart screen and the cart has a product (example #1)",
              "timedOut": null,
              "duration": 12498,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "20bb682e-8dbb-4d8a-a379-3117dfe9232c",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the UI elements display correctly when switch to Cart screen and the cart has multiple products (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the UI elements display correctly when switch to Cart screen and the cart has multiple products (example #1)",
              "timedOut": null,
              "duration": 15602,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b4f09c44-1d75-47f3-8fea-649df4309bef",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the UI elements display correctly when switch to Cart screen and the cart has NOT any product",
              "fullTitle": "Check all element at the cart screen Verify that the UI elements display correctly when switch to Cart screen and the cart has NOT any product",
              "timedOut": null,
              "duration": 3191,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f87646e0-aa01-4524-93de-9738db237bbf",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product in the cart (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product in the cart (example #1)",
              "timedOut": null,
              "duration": 17030,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 05/08/2024', but the text was 'Id: 2726207Amount: 820 USDCard Number: 110Name: TesterDate: 5/7/2024'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 05/08/2024', but the text was 'Id: 2726207Amount: 820 USDCard Number: 110Name: TesterDate: 5/7/2024'\n    at Context.eval (cypress/pages/cartPage.js:217:17)",
                "diff": "- 'Id: 2726207Amount: 820 USDCard Number: 110Name: TesterDate: 5/7/2024'\n+ 'Date: 05/08/2024'\n"
              },
              "uuid": "28b17564-3f13-4f1a-b939-468f307fe537",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product in the cart (example #2)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product in the cart (example #2)",
              "timedOut": null,
              "duration": 19337,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 05/08/2024', but the text was 'Id: 2273369Amount: 360 USDCard Number: eg1+Name: ng4+_-+Date: 5/7/2024'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 05/08/2024', but the text was 'Id: 2273369Amount: 360 USDCard Number: eg1+Name: ng4+_-+Date: 5/7/2024'\n    at Context.eval (cypress/pages/cartPage.js:217:17)",
                "diff": "- 'Id: 2273369Amount: 360 USDCard Number: eg1+Name: ng4+_-+Date: 5/7/2024'\n+ 'Date: 05/08/2024'\n"
              },
              "uuid": "52277210-43e9-445b-b1a7-6e7ba16bb265",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product with input full information (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product with input full information (example #1)",
              "timedOut": null,
              "duration": 21895,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 05/08/2024', but the text was 'Id: 5927411Amount: 820 USDCard Number: 0254Name: TesterDate: 5/7/2024'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 05/08/2024', but the text was 'Id: 5927411Amount: 820 USDCard Number: 0254Name: TesterDate: 5/7/2024'\n    at Context.eval (cypress/pages/cartPage.js:217:17)",
                "diff": "- 'Id: 5927411Amount: 820 USDCard Number: 0254Name: TesterDate: 5/7/2024'\n+ 'Date: 05/08/2024'\n"
              },
              "uuid": "37afe7f8-502a-4d39-9d73-c2bb6135e426",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product with input full information (example #2)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product with input full information (example #2)",
              "timedOut": null,
              "duration": 22375,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 05/08/2024', but the text was 'Id: 6578941Amount: 360 USDCard Number: 21hgfdName: Tester123Date: 5/7/2024'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 05/08/2024', but the text was 'Id: 6578941Amount: 360 USDCard Number: 21hgfdName: Tester123Date: 5/7/2024'\n    at Context.eval (cypress/pages/cartPage.js:217:17)",
                "diff": "- 'Id: 6578941Amount: 360 USDCard Number: 21hgfdName: Tester123Date: 5/7/2024'\n+ 'Date: 05/08/2024'\n"
              },
              "uuid": "3bf45a64-423b-41c3-bd41-2f4cf7c575ac",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase multiple product in the cart (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase multiple product in the cart (example #1)",
              "timedOut": null,
              "duration": 24936,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 05/08/2024', but the text was 'Id: 9138698Amount: 1640 USDCard Number: 110Name: TesterDate: 5/7/2024'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 05/08/2024', but the text was 'Id: 9138698Amount: 1640 USDCard Number: 110Name: TesterDate: 5/7/2024'\n    at Context.eval (cypress/pages/cartPage.js:217:17)",
                "diff": "- 'Id: 9138698Amount: 1640 USDCard Number: 110Name: TesterDate: 5/7/2024'\n+ 'Date: 05/08/2024'\n"
              },
              "uuid": "96b9403a-34fd-4080-a71a-69c9f3dadd91",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase multiple product in the cart (example #2)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase multiple product in the cart (example #2)",
              "timedOut": null,
              "duration": 25654,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 05/08/2024', but the text was 'Id: 2184493Amount: 1470 USDCard Number: e+_-+Name: eng124+_-+Date: 5/7/2024'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 05/08/2024', but the text was 'Id: 2184493Amount: 1470 USDCard Number: e+_-+Name: eng124+_-+Date: 5/7/2024'\n    at Context.eval (cypress/pages/cartPage.js:217:17)",
                "diff": "- 'Id: 2184493Amount: 1470 USDCard Number: e+_-+Name: eng124+_-+Date: 5/7/2024'\n+ 'Date: 05/08/2024'\n"
              },
              "uuid": "f63fa913-4313-47e2-8018-5a4e5e19a523",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase without any product in the cart (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase without any product in the cart (example #1)",
              "timedOut": null,
              "duration": 10964,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'There are NOT any products in the cart!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'There are NOT any products in the cart!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:306:25)",
                "diff": "- 'Thank you for your purchase!'\n+ 'There are NOT any products in the cart!'\n"
              },
              "uuid": "76ceba8e-5d14-4a7a-be8b-b08bdc33fbe2",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product in the cart but NOT fill out mandatory fields (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product in the cart but NOT fill out mandatory fields (example #1)",
              "timedOut": null,
              "duration": 17529,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7568b467-96d6-4b51-9ce6-c420a8851633",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product in the cart but NOT fill out mandatory fields (example #2)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product in the cart but NOT fill out mandatory fields (example #2)",
              "timedOut": null,
              "duration": 17813,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e9316812-7c8a-46d2-8c32-899046708787",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product in the cart but NOT fill out mandatory fields (example #3)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product in the cart but NOT fill out mandatory fields (example #3)",
              "timedOut": null,
              "duration": 16922,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "670eb8bc-0082-4454-9078-6c70a7fc5fcf",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user order a product in the cart but NO click purchase (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user order a product in the cart but NO click purchase (example #1)",
              "timedOut": null,
              "duration": 19289,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "78858873-16fb-4a2a-8ad8-11ae4322fcf6",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can delete a product in the cart (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user can delete a product in the cart (example #1)",
              "timedOut": null,
              "duration": 20451,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9e19f191-32d8-4fd0-84e6-e2e725918850",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can delete a product to blank/empty cart (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user can delete a product to blank/empty cart (example #1)",
              "timedOut": null,
              "duration": 15474,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4a6e74e2-2b86-4f87-aa99-7fcc19e5ab95",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Name field must NOT 30 characters (example #1)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Name field must NOT 30 characters (example #1)",
              "timedOut": null,
              "duration": 25063,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Name is 30 characters!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Name is 30 characters!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:314:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Name is 30 characters!!'\n"
              },
              "uuid": "209f9d33-3b72-4993-b539-9684c3bc023a",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Country field must NOT 30 characters (example #1)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Country field must NOT 30 characters (example #1)",
              "timedOut": null,
              "duration": 28632,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Country is 30 characters!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Country is 30 characters!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:325:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Country is 30 characters!!'\n"
              },
              "uuid": "b4966077-8662-4ca7-ab0c-ddbb84613a92",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of City field must NOT 30 characters (example #1)",
              "fullTitle": "Check all element at the cart screen Validation max-length of City field must NOT 30 characters (example #1)",
              "timedOut": null,
              "duration": 29170,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of City is 30 characters!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of City is 30 characters!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:336:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of City is 30 characters!!'\n"
              },
              "uuid": "0315e7a2-461c-411e-9901-58318c968798",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Creditcard field must NOT 19 characters (example #1)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Creditcard field must NOT 19 characters (example #1)",
              "timedOut": null,
              "duration": 29555,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Creditcard is 19 characters!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Creditcard is 19 characters!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:347:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Creditcard is 19 characters!!'\n"
              },
              "uuid": "7ba09574-8bc5-49de-8a6d-bfcb39068ad3",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Month field must NOT 2 characters and only allow number (example #1)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Month field must NOT 2 characters and only allow number (example #1)",
              "timedOut": null,
              "duration": 31841,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 2 characters and only allow number!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 2 characters and only allow number!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:359:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Month is 2 characters and only allow number!!'\n"
              },
              "uuid": "512e10f5-a165-4901-af4f-0abad5fd4500",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Month field must NOT 2 characters and only allow number (example #2)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Month field must NOT 2 characters and only allow number (example #2)",
              "timedOut": null,
              "duration": 31323,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 2 characters and only allow number!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 2 characters and only allow number!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:364:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Month is 2 characters and only allow number!!'\n"
              },
              "uuid": "75c8ba47-4ae1-4fb1-a80a-2f6a663607f0",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Year field must NOT 4 characters only allow number (example #1)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Year field must NOT 4 characters only allow number (example #1)",
              "timedOut": null,
              "duration": 33232,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 4 characters and only allow number!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 4 characters and only allow number!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:375:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Month is 4 characters and only allow number!!'\n"
              },
              "uuid": "aa839e6c-73f5-4026-9815-ac8a34348e21",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Year field must NOT 4 characters only allow number (example #2)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Year field must NOT 4 characters only allow number (example #2)",
              "timedOut": null,
              "duration": 34120,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 4 characters and only allow number!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 4 characters and only allow number!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:380:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Month is 4 characters and only allow number!!'\n"
              },
              "uuid": "5d9e62aa-127b-41cd-be14-03e712631744",
              "parentUUID": "3f7f51fd-12e1-493c-8ffe-2f2dde844dca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a0ea6a35-8515-44ca-b990-f9e614994e1f",
            "849c6909-61ea-4da5-b6fa-2e11b048b765",
            "04089e70-4682-4e33-9774-10e9109c0eb7",
            "033ad39d-8bc8-4f8e-877e-d5a58d7be043",
            "ce2f039e-3f0e-4bce-bd7a-a1f3fb4f5e4f",
            "c2341444-a71d-4fca-99a2-a357dab1d2a3",
            "20bb682e-8dbb-4d8a-a379-3117dfe9232c",
            "b4f09c44-1d75-47f3-8fea-649df4309bef",
            "f87646e0-aa01-4524-93de-9738db237bbf",
            "7568b467-96d6-4b51-9ce6-c420a8851633",
            "e9316812-7c8a-46d2-8c32-899046708787",
            "670eb8bc-0082-4454-9078-6c70a7fc5fcf",
            "78858873-16fb-4a2a-8ad8-11ae4322fcf6",
            "9e19f191-32d8-4fd0-84e6-e2e725918850",
            "4a6e74e2-2b86-4f87-aa99-7fcc19e5ab95"
          ],
          "failures": [
            "28b17564-3f13-4f1a-b939-468f307fe537",
            "52277210-43e9-445b-b1a7-6e7ba16bb265",
            "37afe7f8-502a-4d39-9d73-c2bb6135e426",
            "3bf45a64-423b-41c3-bd41-2f4cf7c575ac",
            "96b9403a-34fd-4080-a71a-69c9f3dadd91",
            "f63fa913-4313-47e2-8018-5a4e5e19a523",
            "76ceba8e-5d14-4a7a-be8b-b08bdc33fbe2",
            "209f9d33-3b72-4993-b539-9684c3bc023a",
            "b4966077-8662-4ca7-ab0c-ddbb84613a92",
            "0315e7a2-461c-411e-9901-58318c968798",
            "7ba09574-8bc5-49de-8a6d-bfcb39068ad3",
            "512e10f5-a165-4901-af4f-0abad5fd4500",
            "75c8ba47-4ae1-4fb1-a80a-2f6a663607f0",
            "aa839e6c-73f5-4026-9815-ac8a34348e21",
            "5d9e62aa-127b-41cd-be14-03e712631744"
          ],
          "pending": [],
          "skipped": [],
          "duration": 544095,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6d6f75db-a62a-40ef-9341-8e2f233b9cfc",
      "title": "",
      "fullFile": "cypress\\e2e\\contact.feature",
      "file": "cypress\\e2e\\contact.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "01b2a3d7-3dda-433b-a893-577919600a97",
          "title": "Check Contact pop-up",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the elements display sucess when user open Contact Popup",
              "fullTitle": "Check Contact pop-up Verify that the elements display sucess when user open Contact Popup",
              "timedOut": null,
              "duration": 3279,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "084e427b-3320-4391-ba70-27a853825b3b",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can send a message successfully with input required fields (example #1)",
              "fullTitle": "Check Contact pop-up Verify that the user can send a message successfully with input required fields (example #1)",
              "timedOut": null,
              "duration": 6622,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "68cb7b04-4d62-46df-a152-2c5ac4d4cec4",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can send a message successfully with input full fields (example #1)",
              "fullTitle": "Check Contact pop-up Verify that the user can send a message successfully with input full fields (example #1)",
              "timedOut": null,
              "duration": 6635,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9eb23fcf-4cf3-4979-b8a6-59dd8abf862b",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT send a message with input only optional fields (example #1)",
              "fullTitle": "Check Contact pop-up Verify that the user can NOT send a message with input only optional fields (example #1)",
              "timedOut": null,
              "duration": 6565,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'Request to enter Contact Email and Message!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'Request to enter Contact Email and Message!!'\n    at Context.eval (cypress/pages/contactPage.js:89:32)",
                "diff": "- 'Thanks for the message!!'\n+ 'Request to enter Contact Email and Message!!'\n"
              },
              "uuid": "db2aa2b1-6f28-452c-83e1-9fc200a22719",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT send a message without inputting any fields",
              "fullTitle": "Check Contact pop-up Verify that the user can NOT send a message without inputting any fields",
              "timedOut": null,
              "duration": 5410,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'Request to enter Contact Email and Message!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'Request to enter Contact Email and Message!!'\n    at Context.eval (cypress/pages/contactPage.js:89:32)",
                "diff": "- 'Thanks for the message!!'\n+ 'Request to enter Contact Email and Message!!'\n"
              },
              "uuid": "ca82b7c0-5272-40db-9980-d8d175888e03",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can close popup by clicking Close button (example #1)",
              "fullTitle": "Check Contact pop-up Verify that the user can close popup by clicking Close button (example #1)",
              "timedOut": null,
              "duration": 5908,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c13cffec-0cd1-412e-b682-2c1876f6a2a0",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can close popup by clicking x icon (example #1)",
              "fullTitle": "Check Contact pop-up Verify that the user can close popup by clicking x icon (example #1)",
              "timedOut": null,
              "duration": 5771,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "aee004ba-2db6-4ce8-94a5-bda60e9d5abb",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Email field must be in the correct email format (example #1)",
              "fullTitle": "Check Contact pop-up Validation the Contact Email field must be in the correct email format (example #1)",
              "timedOut": null,
              "duration": 7025,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'Invalid Email Contact!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'Invalid Email Contact!!'\n    at Context.eval (cypress/pages/contactPage.js:110:36)",
                "diff": "- 'Thanks for the message!!'\n+ 'Invalid Email Contact!!'\n"
              },
              "uuid": "34c7ebe6-14ac-488d-965a-e882b795a7c7",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Email field must be in the correct email format (example #2)",
              "fullTitle": "Check Contact pop-up Validation the Contact Email field must be in the correct email format (example #2)",
              "timedOut": null,
              "duration": 6822,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'Invalid Email Contact!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'Invalid Email Contact!!'\n    at Context.eval (cypress/pages/contactPage.js:110:36)",
                "diff": "- 'Thanks for the message!!'\n+ 'Invalid Email Contact!!'\n"
              },
              "uuid": "5da472c9-5799-475a-a5f5-394de260be73",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Email field must be in the correct email format (example #3)",
              "fullTitle": "Check Contact pop-up Validation the Contact Email field must be in the correct email format (example #3)",
              "timedOut": null,
              "duration": 7033,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'Invalid Email Contact!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'Invalid Email Contact!!'\n    at Context.eval (cypress/pages/contactPage.js:110:36)",
                "diff": "- 'Thanks for the message!!'\n+ 'Invalid Email Contact!!'\n"
              },
              "uuid": "2ef93475-1c07-4daf-a55b-585e4371fc48",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Email field must NOT exceed 30 characters (example #1)",
              "fullTitle": "Check Contact pop-up Validation the Contact Email field must NOT exceed 30 characters (example #1)",
              "timedOut": null,
              "duration": 7226,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'The maximum length of Contact Email is 30 characters!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'The maximum length of Contact Email is 30 characters!!'\n    at Context.eval (cypress/pages/contactPage.js:124:36)",
                "diff": "- 'Thanks for the message!!'\n+ 'The maximum length of Contact Email is 30 characters!!'\n"
              },
              "uuid": "05b44848-7d84-4cb5-b7e4-e90ea3d37df1",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Name field is free text (example #1)",
              "fullTitle": "Check Contact pop-up Validation the Contact Name field is free text (example #1)",
              "timedOut": null,
              "duration": 7116,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "66d31ea7-3b13-4270-9274-b3ede786595b",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Name field is free text (example #2)",
              "fullTitle": "Check Contact pop-up Validation the Contact Name field is free text (example #2)",
              "timedOut": null,
              "duration": 6824,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "568ad7f1-9551-4307-83c4-a2c1e6fa54c0",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Name field is free text (example #3)",
              "fullTitle": "Check Contact pop-up Validation the Contact Name field is free text (example #3)",
              "timedOut": null,
              "duration": 7878,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f86b459b-811c-4676-a648-f367802196cf",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Name field is free text (example #4)",
              "fullTitle": "Check Contact pop-up Validation the Contact Name field is free text (example #4)",
              "timedOut": null,
              "duration": 7107,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "86ab153d-fae4-4aa6-8dec-ab2146ab0913",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Name field must NOT exceed 25 characters (example #1)",
              "fullTitle": "Check Contact pop-up Validation the Contact Name field must NOT exceed 25 characters (example #1)",
              "timedOut": null,
              "duration": 7185,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'The maximum length of Contact Name is 25 characters!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'The maximum length of Contact Name is 25 characters!!'\n    at Context.eval (cypress/pages/contactPage.js:138:36)",
                "diff": "- 'Thanks for the message!!'\n+ 'The maximum length of Contact Name is 25 characters!!'\n"
              },
              "uuid": "67e18078-7131-4955-a17f-f963fba0e425",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Message field is free text (example #1)",
              "fullTitle": "Check Contact pop-up Validation the Message field is free text (example #1)",
              "timedOut": null,
              "duration": 7150,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "2de8f530-d1d8-4621-ab24-aa54b4ba912d",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Message field must NOT exceed 25 characters (example #1)",
              "fullTitle": "Check Contact pop-up Validation the Message field must NOT exceed 25 characters (example #1)",
              "timedOut": null,
              "duration": 8324,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'Maximum length of Message is 100 characters!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'Maximum length of Message is 100 characters!!'\n    at Context.eval (cypress/pages/contactPage.js:152:36)",
                "diff": "- 'Thanks for the message!!'\n+ 'Maximum length of Message is 100 characters!!'\n"
              },
              "uuid": "c8bcc5b3-f7cd-41f3-bfbf-92f25772571c",
              "parentUUID": "01b2a3d7-3dda-433b-a893-577919600a97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "084e427b-3320-4391-ba70-27a853825b3b",
            "68cb7b04-4d62-46df-a152-2c5ac4d4cec4",
            "9eb23fcf-4cf3-4979-b8a6-59dd8abf862b",
            "c13cffec-0cd1-412e-b682-2c1876f6a2a0",
            "aee004ba-2db6-4ce8-94a5-bda60e9d5abb",
            "66d31ea7-3b13-4270-9274-b3ede786595b",
            "568ad7f1-9551-4307-83c4-a2c1e6fa54c0",
            "f86b459b-811c-4676-a648-f367802196cf",
            "86ab153d-fae4-4aa6-8dec-ab2146ab0913",
            "2de8f530-d1d8-4621-ab24-aa54b4ba912d"
          ],
          "failures": [
            "db2aa2b1-6f28-452c-83e1-9fc200a22719",
            "ca82b7c0-5272-40db-9980-d8d175888e03",
            "34c7ebe6-14ac-488d-965a-e882b795a7c7",
            "5da472c9-5799-475a-a5f5-394de260be73",
            "2ef93475-1c07-4daf-a55b-585e4371fc48",
            "05b44848-7d84-4cb5-b7e4-e90ea3d37df1",
            "67e18078-7131-4955-a17f-f963fba0e425",
            "c8bcc5b3-f7cd-41f3-bfbf-92f25772571c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 119880,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4281cd5b-6367-436d-9a44-8029b47437c4",
      "title": "",
      "fullFile": "cypress\\e2e\\homepage.feature",
      "file": "cypress\\e2e\\homepage.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
          "title": "Check all element at home page screen",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the header displays correctly",
              "fullTitle": "Check all element at home page screen Verify that the header displays correctly",
              "timedOut": null,
              "duration": 2253,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1deebe2e-eae8-41da-b0e4-6cc32ed4b2a6",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to Home Page by clicking the logo/brand at the header",
              "fullTitle": "Check all element at home page screen Verify that the user can redirect to Home Page by clicking the logo/brand at the header",
              "timedOut": null,
              "duration": 3206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a2a97cfc-fd84-4835-b234-2aa2f145cebb",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the item in the navbar is highlighted when the user hover",
              "fullTitle": "Check all element at home page screen Verify that the item in the navbar is highlighted when the user hover",
              "timedOut": null,
              "duration": 2099,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "bd48c839-d205-4481-b206-25a8477d5a47",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the footer displays correctly at the bottom",
              "fullTitle": "Check all element at home page screen Verify that the footer displays correctly at the bottom",
              "timedOut": null,
              "duration": 2210,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected '\"\"' to equal 'none'",
                "estack": "AssertionError: expected '\"\"' to equal 'none'\n    at Context.eval (cypress/pages/commonPage.js:57:36)",
                "diff": "- '\"\"'\n+ 'none'\n"
              },
              "uuid": "cd1b5137-80d4-4f8d-bb77-24d05f8bf987",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the information on the 3 columns footer displayed accurately",
              "fullTitle": "Check all element at home page screen Verify that the information on the 3 columns footer displayed accurately",
              "timedOut": null,
              "duration": 2090,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3482a771-b02a-47c4-9f12-9fc8ab7d6d28",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user can NOT click any item on the footer",
              "fullTitle": "Check all element at home page screen Verify user can NOT click any item on the footer",
              "timedOut": null,
              "duration": 2126,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4501d01b-5bb7-4468-aa52-8451f027c5aa",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the slideshow displays correctly",
              "fullTitle": "Check all element at home page screen Verify that the slideshow displays correctly",
              "timedOut": null,
              "duration": 1969,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1597dbbf-d5f5-4343-9d89-8522f11b740b",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the slideshow displays the 3 products sequentially automatically",
              "fullTitle": "Check all element at home page screen Verify that the slideshow displays the 3 products sequentially automatically",
              "timedOut": null,
              "duration": 12825,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7497bbea-23d8-4b1e-93a4-5a0693332cbd",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the next product at slideshow by clicking a next icon",
              "fullTitle": "Check all element at home page screen Verify that the user can view the next product at slideshow by clicking a next icon",
              "timedOut": null,
              "duration": 3360,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "5914309b-2224-4a1b-8646-3295911e402b",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the previous product at slideshow by clicking a previous icon",
              "fullTitle": "Check all element at home page screen Verify that the user can view the previous product at slideshow by clicking a previous icon",
              "timedOut": null,
              "duration": 2642,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e5f98f0b-91ec-424a-b74a-5bfcbf68769d",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the product at slideshow by clicking a carousel",
              "fullTitle": "Check all element at home page screen Verify that the user can view the product at slideshow by clicking a carousel",
              "timedOut": null,
              "duration": 2240,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a5f86d1e-2f17-49a2-afc9-a8d07f214281",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that categories menu displays correctly",
              "fullTitle": "Check all element at home page screen Verify that categories menu displays correctly",
              "timedOut": null,
              "duration": 1840,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1c98fc5d-030b-4922-9ac1-1e4de664c02c",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the specific list of products by clicking a Group Product in a Categories menu (example #1)",
              "fullTitle": "Check all element at home page screen Verify that the user can view the specific list of products by clicking a Group Product in a Categories menu (example #1)",
              "timedOut": null,
              "duration": 4770,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3d040689-2751-4d08-a3a9-abdc9bb62ed5",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the specific list of products by clicking a Group Product in a Categories menu (example #2)",
              "fullTitle": "Check all element at home page screen Verify that the user can view the specific list of products by clicking a Group Product in a Categories menu (example #2)",
              "timedOut": null,
              "duration": 4772,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9b0eea67-e0dc-49f0-8a38-da705c5b66ad",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the specific list of products by clicking a Group Product in a Categories menu (example #3)",
              "fullTitle": "Check all element at home page screen Verify that the user can view the specific list of products by clicking a Group Product in a Categories menu (example #3)",
              "timedOut": null,
              "duration": 4979,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7de177ed-ebbc-4fb4-b638-7574181077fb",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the whole list of products by clicking Category menu (example #1)",
              "fullTitle": "Check all element at home page screen Verify that the user can view the whole list of products by clicking Category menu (example #1)",
              "timedOut": null,
              "duration": 6807,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "21064965-24ff-42ac-9860-f754ec99d3dd",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the whole list of products by clicking Category menu (example #2)",
              "fullTitle": "Check all element at home page screen Verify that the user can view the whole list of products by clicking Category menu (example #2)",
              "timedOut": null,
              "duration": 6381,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "27964bda-9143-423f-af8b-313c51b4a25b",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the whole list of products by clicking Category menu (example #3)",
              "fullTitle": "Check all element at home page screen Verify that the user can view the whole list of products by clicking Category menu (example #3)",
              "timedOut": null,
              "duration": 6779,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "6978ba9c-a11b-4a71-a162-4f7e79f35df9",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the list of product card display correctly",
              "fullTitle": "Check all element at home page screen Verify that the list of product card display correctly",
              "timedOut": null,
              "duration": 2779,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "5e821547-f093-4970-97da-6f4bf8d24055",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the information of the product card is display correctly",
              "fullTitle": "Check all element at home page screen Verify that the information of the product card is display correctly",
              "timedOut": null,
              "duration": 3218,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "33fc45e5-4a8b-4d4d-95ef-133130c47209",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the title of the product card is underlined when the user hover",
              "fullTitle": "Check all element at home page screen Verify that the title of the product card is underlined when the user hover",
              "timedOut": null,
              "duration": 2182,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e91d1fcb-5761-457b-9450-c1bee65516bf",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to an Information product screen when clicking a photo of the product (example #1)",
              "fullTitle": "Check all element at home page screen Verify that the user can redirect to an Information product screen when clicking a photo of the product (example #1)",
              "timedOut": null,
              "duration": 7958,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "cb90a307-2d44-44e9-888f-d55983f47838",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to an Information product screen when clicking a photo of the product (example #2)",
              "fullTitle": "Check all element at home page screen Verify that the user can redirect to an Information product screen when clicking a photo of the product (example #2)",
              "timedOut": null,
              "duration": 8075,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c21cb6ed-caff-4806-ad49-3015826a881d",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to an Information product screen when clicking a title of the product (example #1)",
              "fullTitle": "Check all element at home page screen Verify that the user can redirect to an Information product screen when clicking a title of the product (example #1)",
              "timedOut": null,
              "duration": 8098,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d313de3f-941e-4f60-aa05-60ada6365df3",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to an Information product screen when clicking a title of the product (example #2)",
              "fullTitle": "Check all element at home page screen Verify that the user can redirect to an Information product screen when clicking a title of the product (example #2)",
              "timedOut": null,
              "duration": 8238,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "12a86c93-31f5-422d-912f-8892d82c792a",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the elements of pagination display success",
              "fullTitle": "Check all element at home page screen Verify the elements of pagination display success",
              "timedOut": null,
              "duration": 6211,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<button#prev2.page-link>' not to be 'visible'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<button#prev2.page-link>' not to be 'visible'\n    at Function.eval [as checkPreBtnNotBeVisible] (cypress/pages/homePage.js:255:25)\n    at Context.eval (cypress/e2e/steps/homepage.steps.js:114:13)\n    at Context.resolveAndRunStepDefinition (node_modules/cypress-cucumber-preprocessor/lib/resolveStepDefinition.js:193:0)\n    at Context.eval (node_modules/cypress-cucumber-preprocessor/lib/createTestFromScenario.js:27:0)",
                "diff": null
              },
              "uuid": "588fae15-fead-43e0-b6db-0f1a828737bb",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the user can view next or previous page with whole products by cliking Next/Previous button",
              "fullTitle": "Check all element at home page screen Verify the user can view next or previous page with whole products by cliking Next/Previous button",
              "timedOut": null,
              "duration": 12298,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<a.hrefch>' to have text 'Samsung galaxy s6', but the text was 'Nokia lumia 1520'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<a.hrefch>' to have text 'Samsung galaxy s6', but the text was 'Nokia lumia 1520'\n    at Context.eval (cypress/pages/homePage.js:169:49)",
                "diff": "- 'Nokia lumia 1520'\n+ 'Samsung galaxy s6'\n"
              },
              "uuid": "258846c7-e9bd-4cb9-a9e0-475b00f837e8",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the elements of pagination must be hidden when number of products on a page is less thane 10 (example #1)",
              "fullTitle": "Check all element at home page screen Verify the elements of pagination must be hidden when number of products on a page is less thane 10 (example #1)",
              "timedOut": null,
              "duration": 9813,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<button#next2.page-link>' not to be 'visible'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<button#next2.page-link>' not to be 'visible'\n    at Function.eval [as checkNextBtnNotBeVisible] (cypress/pages/homePage.js:258:25)\n    at Context.eval (cypress/e2e/steps/homepage.steps.js:110:13)\n    at Context.resolveAndRunStepDefinition (node_modules/cypress-cucumber-preprocessor/lib/resolveStepDefinition.js:193:0)\n    at Context.eval (node_modules/cypress-cucumber-preprocessor/lib/createTestFromScenario.js:27:0)",
                "diff": null
              },
              "uuid": "456f1859-e43b-41b4-acb6-d7d3d392ba78",
              "parentUUID": "4189fcde-9cdb-4a9e-b2da-46bc6f7bc7d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1deebe2e-eae8-41da-b0e4-6cc32ed4b2a6",
            "a2a97cfc-fd84-4835-b234-2aa2f145cebb",
            "bd48c839-d205-4481-b206-25a8477d5a47",
            "3482a771-b02a-47c4-9f12-9fc8ab7d6d28",
            "4501d01b-5bb7-4468-aa52-8451f027c5aa",
            "1597dbbf-d5f5-4343-9d89-8522f11b740b",
            "7497bbea-23d8-4b1e-93a4-5a0693332cbd",
            "5914309b-2224-4a1b-8646-3295911e402b",
            "e5f98f0b-91ec-424a-b74a-5bfcbf68769d",
            "a5f86d1e-2f17-49a2-afc9-a8d07f214281",
            "1c98fc5d-030b-4922-9ac1-1e4de664c02c",
            "3d040689-2751-4d08-a3a9-abdc9bb62ed5",
            "9b0eea67-e0dc-49f0-8a38-da705c5b66ad",
            "7de177ed-ebbc-4fb4-b638-7574181077fb",
            "21064965-24ff-42ac-9860-f754ec99d3dd",
            "27964bda-9143-423f-af8b-313c51b4a25b",
            "6978ba9c-a11b-4a71-a162-4f7e79f35df9",
            "5e821547-f093-4970-97da-6f4bf8d24055",
            "33fc45e5-4a8b-4d4d-95ef-133130c47209",
            "e91d1fcb-5761-457b-9450-c1bee65516bf",
            "cb90a307-2d44-44e9-888f-d55983f47838",
            "c21cb6ed-caff-4806-ad49-3015826a881d",
            "d313de3f-941e-4f60-aa05-60ada6365df3",
            "12a86c93-31f5-422d-912f-8892d82c792a"
          ],
          "failures": [
            "cd1b5137-80d4-4f8d-bb77-24d05f8bf987",
            "588fae15-fead-43e0-b6db-0f1a828737bb",
            "258846c7-e9bd-4cb9-a9e0-475b00f837e8",
            "456f1859-e43b-41b4-acb6-d7d3d392ba78"
          ],
          "pending": [],
          "skipped": [],
          "duration": 142218,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "cf29f615-3513-4e0a-9f9c-a177750cfe23",
      "title": "",
      "fullFile": "cypress\\e2e\\inforProduct.feature",
      "file": "cypress\\e2e\\inforProduct.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f11e7021-821a-464a-87a0-437dacc07245",
          "title": "Check all element at the Information Product screen",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the header displays correctly",
              "fullTitle": "Check all element at the Information Product screen Verify that the header displays correctly",
              "timedOut": null,
              "duration": 3544,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "66afa79d-4546-4cca-af17-065091af2a78",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to Home Page by clicking the logo/brand at the header",
              "fullTitle": "Check all element at the Information Product screen Verify that the user can redirect to Home Page by clicking the logo/brand at the header",
              "timedOut": null,
              "duration": 4007,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1ee5909b-cee6-4ecb-9b60-cf3829f0b662",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the item in the navbar is highlighted when the user hover",
              "fullTitle": "Check all element at the Information Product screen Verify that the item in the navbar is highlighted when the user hover",
              "timedOut": null,
              "duration": 2694,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ac17db86-9cff-4628-a389-2090765a112b",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the footer displays correctly at the bottom",
              "fullTitle": "Check all element at the Information Product screen Verify that the footer displays correctly at the bottom",
              "timedOut": null,
              "duration": 2546,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "5e02eff9-bd43-44cb-85d9-8a38243f81c2",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the information on the 3 columns footer displayed accurately",
              "fullTitle": "Check all element at the Information Product screen Verify that the information on the 3 columns footer displayed accurately",
              "timedOut": null,
              "duration": 2756,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b62d9e77-b1b2-46f8-8ebd-4716d8c3659d",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user can NOT click any item on the footer",
              "fullTitle": "Check all element at the Information Product screen Verify user can NOT click any item on the footer",
              "timedOut": null,
              "duration": 3063,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "17695b61-2d20-4e16-b3d0-bc605d8f53cd",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the screen displays correctly UI without ant broken elements (example #1)",
              "fullTitle": "Check all element at the Information Product screen Verify the screen displays correctly UI without ant broken elements (example #1)",
              "timedOut": null,
              "duration": 8788,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected <ol.carousel-indicators> not to exist in the DOM, but it was continuously found.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected <ol.carousel-indicators> not to exist in the DOM, but it was continuously found.\n    at Function.eval [as verifyElementsDisplay] (cypress/pages/inforProductPage.js:22:25)\n    at Context.eval (cypress/e2e/steps/inforProduct.steps.js:85:21)\n    at Context.resolveAndRunStepDefinition (node_modules/cypress-cucumber-preprocessor/lib/resolveStepDefinition.js:193:0)\n    at Context.eval (node_modules/cypress-cucumber-preprocessor/lib/createTestFromScenario.js:27:0)",
                "diff": null
              },
              "uuid": "3ee48de0-ff83-416f-a024-afa0671d086c",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the elements display correctly at Information Product when user select a product (example #1)",
              "fullTitle": "Check all element at the Information Product screen Verify that the elements display correctly at Information Product when user select a product (example #1)",
              "timedOut": null,
              "duration": 7023,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "09a22578-4061-4e00-9a43-6b3f6f76cbf5",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the elements display correctly at Information Product when user select a product (example #2)",
              "fullTitle": "Check all element at the Information Product screen Verify that the elements display correctly at Information Product when user select a product (example #2)",
              "timedOut": null,
              "duration": 6142,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "cacab03c-7fce-4b8e-a332-e4c1c7bcfc56",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can add a product to a cart successfully (example #1)",
              "fullTitle": "Check all element at the Information Product screen Verify that the user can add a product to a cart successfully (example #1)",
              "timedOut": null,
              "duration": 12078,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "2e44a39f-43c4-41f5-8814-8cd9577a80c0",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can add a product to a cart successfully (example #2)",
              "fullTitle": "Check all element at the Information Product screen Verify that the user can add a product to a cart successfully (example #2)",
              "timedOut": null,
              "duration": 10825,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "36df5ad6-3e10-41b4-a115-3b04dd5949b2",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the the user can add product to a many times successfully (example #1)",
              "fullTitle": "Check all element at the Information Product screen Verify the the user can add product to a many times successfully (example #1)",
              "timedOut": null,
              "duration": 12583,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "916faa9b-6ff4-412d-8520-d3442e4cea8a",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the the user can add product to a many times successfully (example #2)",
              "fullTitle": "Check all element at the Information Product screen Verify the the user can add product to a many times successfully (example #2)",
              "timedOut": null,
              "duration": 13348,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "2903c6dd-a2d3-46d2-bda3-9757e2d023b5",
              "parentUUID": "f11e7021-821a-464a-87a0-437dacc07245",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "66afa79d-4546-4cca-af17-065091af2a78",
            "1ee5909b-cee6-4ecb-9b60-cf3829f0b662",
            "ac17db86-9cff-4628-a389-2090765a112b",
            "5e02eff9-bd43-44cb-85d9-8a38243f81c2",
            "b62d9e77-b1b2-46f8-8ebd-4716d8c3659d",
            "17695b61-2d20-4e16-b3d0-bc605d8f53cd",
            "09a22578-4061-4e00-9a43-6b3f6f76cbf5",
            "cacab03c-7fce-4b8e-a332-e4c1c7bcfc56",
            "2e44a39f-43c4-41f5-8814-8cd9577a80c0",
            "36df5ad6-3e10-41b4-a115-3b04dd5949b2",
            "916faa9b-6ff4-412d-8520-d3442e4cea8a",
            "2903c6dd-a2d3-46d2-bda3-9757e2d023b5"
          ],
          "failures": [
            "3ee48de0-ff83-416f-a024-afa0671d086c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 89397,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f62251bf-a4de-48b9-991b-bb1fa81be8dc",
      "title": "",
      "fullFile": "cypress\\e2e\\login.feature",
      "file": "cypress\\e2e\\login.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "53bdc72d-ca85-432f-8658-51c389fa47cc",
          "title": "Check Log in popup",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the elements display sucess when user open Login Popup",
              "fullTitle": "Check Log in popup Verify that the elements display sucess when user open Login Popup",
              "timedOut": null,
              "duration": 3295,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3e52f939-0f4e-49a1-aaf3-030eb407de6f",
              "parentUUID": "53bdc72d-ca85-432f-8658-51c389fa47cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can login successfully with valid username and password (example #1)",
              "fullTitle": "Check Log in popup Verify that the user can login successfully with valid username and password (example #1)",
              "timedOut": null,
              "duration": 6842,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4db29df8-4ef2-42be-9f60-a047ef796c39",
              "parentUUID": "53bdc72d-ca85-432f-8658-51c389fa47cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can login successfully with valid username and password (example #2)",
              "fullTitle": "Check Log in popup Verify that the user can login successfully with valid username and password (example #2)",
              "timedOut": null,
              "duration": 7864,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "5404fdf7-1c81-4e79-9a5c-e4898745c008",
              "parentUUID": "53bdc72d-ca85-432f-8658-51c389fa47cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT login with username is NOT existed (example #1)",
              "fullTitle": "Check Log in popup Verify that the user can NOT login with username is NOT existed (example #1)",
              "timedOut": null,
              "duration": 6664,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "2d2bc555-7bef-4c42-8c03-7f615dec35db",
              "parentUUID": "53bdc72d-ca85-432f-8658-51c389fa47cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT login with password is invalid (example #1)",
              "fullTitle": "Check Log in popup Verify that the user can NOT login with password is invalid (example #1)",
              "timedOut": null,
              "duration": 5729,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e2f7f5b8-68f6-405f-a0a8-fc643b36e9b1",
              "parentUUID": "53bdc72d-ca85-432f-8658-51c389fa47cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT login with empty/blank username or password (example #1)",
              "fullTitle": "Check Log in popup Verify that the user can NOT login with empty/blank username or password (example #1)",
              "timedOut": null,
              "duration": 6144,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "64d0da2a-045f-4bab-a4df-b26b0664804d",
              "parentUUID": "53bdc72d-ca85-432f-8658-51c389fa47cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT login with empty/blank username or password (example #2)",
              "fullTitle": "Check Log in popup Verify that the user can NOT login with empty/blank username or password (example #2)",
              "timedOut": null,
              "duration": 5510,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "df51a5b4-6036-45c5-87cd-9edf8ff0fb62",
              "parentUUID": "53bdc72d-ca85-432f-8658-51c389fa47cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT login with empty/blank username or password (example #3)",
              "fullTitle": "Check Log in popup Verify that the user can NOT login with empty/blank username or password (example #3)",
              "timedOut": null,
              "duration": 5359,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "36e0465d-ac6a-491b-a10e-1852e582919a",
              "parentUUID": "53bdc72d-ca85-432f-8658-51c389fa47cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can login successfully with valid username and password (example #1)",
              "fullTitle": "Check Log in popup Verify that the user can login successfully with valid username and password (example #1)",
              "timedOut": null,
              "duration": 8241,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "bd33e5c3-500b-4e73-8f0a-3a95f57f948c",
              "parentUUID": "53bdc72d-ca85-432f-8658-51c389fa47cc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3e52f939-0f4e-49a1-aaf3-030eb407de6f",
            "4db29df8-4ef2-42be-9f60-a047ef796c39",
            "5404fdf7-1c81-4e79-9a5c-e4898745c008",
            "2d2bc555-7bef-4c42-8c03-7f615dec35db",
            "e2f7f5b8-68f6-405f-a0a8-fc643b36e9b1",
            "64d0da2a-045f-4bab-a4df-b26b0664804d",
            "df51a5b4-6036-45c5-87cd-9edf8ff0fb62",
            "36e0465d-ac6a-491b-a10e-1852e582919a",
            "bd33e5c3-500b-4e73-8f0a-3a95f57f948c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55648,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7106e9bb-408e-448b-91b0-11e663705dfa",
      "title": "",
      "fullFile": "cypress\\e2e\\signup.feature",
      "file": "cypress\\e2e\\signup.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "40157626-974b-4664-b048-fecc5c1f6889",
          "title": "Check Sign up popup",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the elements display sucess when user open Signup Popup",
              "fullTitle": "Check Sign up popup Verify that the elements display sucess when user open Signup Popup",
              "timedOut": null,
              "duration": 3718,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "17e06c77-9465-4e23-b24f-e593ff09d47d",
              "parentUUID": "40157626-974b-4664-b048-fecc5c1f6889",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can Signup successfully with valid username and password (example #1)",
              "fullTitle": "Check Sign up popup Verify that the user can Signup successfully with valid username and password (example #1)",
              "timedOut": null,
              "duration": 5708,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "8fe5ebd1-2cd5-4b70-b725-71830eb1039d",
              "parentUUID": "40157626-974b-4664-b048-fecc5c1f6889",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT Signup with username is existed (example #1)",
              "fullTitle": "Check Sign up popup Verify that the user can NOT Signup with username is existed (example #1)",
              "timedOut": null,
              "duration": 5787,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "af95e6f9-3467-40c0-a444-a6351d63f815",
              "parentUUID": "40157626-974b-4664-b048-fecc5c1f6889",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT Signup with empty/blank username or password (example #1)",
              "fullTitle": "Check Sign up popup Verify that the user can NOT Signup with empty/blank username or password (example #1)",
              "timedOut": null,
              "duration": 5421,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "5d06d9ed-db53-4ea1-a5f8-5f9d1ba9da45",
              "parentUUID": "40157626-974b-4664-b048-fecc5c1f6889",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT Signup with empty/blank username or password (example #2)",
              "fullTitle": "Check Sign up popup Verify that the user can NOT Signup with empty/blank username or password (example #2)",
              "timedOut": null,
              "duration": 5413,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "dd75edab-9b51-4016-ab3b-7cf7a3035fc0",
              "parentUUID": "40157626-974b-4664-b048-fecc5c1f6889",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT Signup with empty/blank username or password (example #3)",
              "fullTitle": "Check Sign up popup Verify that the user can NOT Signup with empty/blank username or password (example #3)",
              "timedOut": null,
              "duration": 5149,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b742decb-a2b1-4b6c-a06a-fae7a57f5c6c",
              "parentUUID": "40157626-974b-4664-b048-fecc5c1f6889",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Username field must NOT exceed 20 characters (example #1)",
              "fullTitle": "Check Sign up popup Validation the Username field must NOT exceed 20 characters (example #1)",
              "timedOut": null,
              "duration": 5907,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'This user already exist.' to equal 'Maximum length of Username is 20 characters!'",
                "estack": "AssertionError: expected 'This user already exist.' to equal 'Maximum length of Username is 20 characters!'\n    at Context.eval (cypress/pages/signupPage.js:75:36)",
                "diff": "- 'This user already exist.'\n+ 'Maximum length of Username is 20 characters!'\n"
              },
              "uuid": "bc423073-f232-462b-ab25-0e08d50dab9d",
              "parentUUID": "40157626-974b-4664-b048-fecc5c1f6889",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the password field must NOT exceed 8 characters (example #1)",
              "fullTitle": "Check Sign up popup Validation the password field must NOT exceed 8 characters (example #1)",
              "timedOut": null,
              "duration": 5788,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'This user already exist.' to equal 'Maximum length of password is 8 characters!'",
                "estack": "AssertionError: expected 'This user already exist.' to equal 'Maximum length of password is 8 characters!'\n    at Context.eval (cypress/pages/signupPage.js:87:36)",
                "diff": "- 'This user already exist.'\n+ 'Maximum length of password is 8 characters!'\n"
              },
              "uuid": "7c443364-951e-42b5-ae89-a6ddf0268bab",
              "parentUUID": "40157626-974b-4664-b048-fecc5c1f6889",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can close Signup Popup by clicking Close button (example #1)",
              "fullTitle": "Check Sign up popup Verify that the user can close Signup Popup by clicking Close button (example #1)",
              "timedOut": null,
              "duration": 5778,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d2ecd5b6-667e-410b-996a-c478bac87cd5",
              "parentUUID": "40157626-974b-4664-b048-fecc5c1f6889",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can close Signup Popup by clicking x icon (example #1)",
              "fullTitle": "Check Sign up popup Verify that the user can close Signup Popup by clicking x icon (example #1)",
              "timedOut": null,
              "duration": 5814,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e3b3f52a-b3b5-4103-896c-266f5f471505",
              "parentUUID": "40157626-974b-4664-b048-fecc5c1f6889",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17e06c77-9465-4e23-b24f-e593ff09d47d",
            "8fe5ebd1-2cd5-4b70-b725-71830eb1039d",
            "af95e6f9-3467-40c0-a444-a6351d63f815",
            "5d06d9ed-db53-4ea1-a5f8-5f9d1ba9da45",
            "dd75edab-9b51-4016-ab3b-7cf7a3035fc0",
            "b742decb-a2b1-4b6c-a06a-fae7a57f5c6c",
            "d2ecd5b6-667e-410b-996a-c478bac87cd5",
            "e3b3f52a-b3b5-4103-896c-266f5f471505"
          ],
          "failures": [
            "bc423073-f232-462b-ab25-0e08d50dab9d",
            "7c443364-951e-42b5-ae89-a6ddf0268bab"
          ],
          "pending": [],
          "skipped": [],
          "duration": 54483,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "47859411-d8b0-4a4e-bc51-09ac5dce0302",
      "title": "",
      "fullFile": "cypress\\e2e\\aboutus.feature",
      "file": "cypress\\e2e\\aboutus.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "be4ddfe7-d177-403b-9d7a-33e295cecbd8",
          "title": "Check About us pop-up",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the elements display sucess when user open About us Popup",
              "fullTitle": "Check About us pop-up Verify that the elements display sucess when user open About us Popup",
              "timedOut": null,
              "duration": 4019,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a738cee0-e789-4689-bcdc-b43ca0df8fdb",
              "parentUUID": "be4ddfe7-d177-403b-9d7a-33e295cecbd8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can close pop-up by click Close button",
              "fullTitle": "Check About us pop-up Verify that the user can close pop-up by click Close button",
              "timedOut": null,
              "duration": 4382,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "60af1cc9-b495-4c61-a42c-7a99147a82d5",
              "parentUUID": "be4ddfe7-d177-403b-9d7a-33e295cecbd8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can close pop-up by click x icon",
              "fullTitle": "Check About us pop-up Verify that the user can close pop-up by click x icon",
              "timedOut": null,
              "duration": 4200,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "48630cd9-d97b-4bb6-bd88-4fa7d85091d9",
              "parentUUID": "be4ddfe7-d177-403b-9d7a-33e295cecbd8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a738cee0-e789-4689-bcdc-b43ca0df8fdb",
            "60af1cc9-b495-4c61-a42c-7a99147a82d5",
            "48630cd9-d97b-4bb6-bd88-4fa7d85091d9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12601,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": false,
        "reportDir": "result",
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}