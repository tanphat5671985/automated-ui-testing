{
  "stats": {
    "suites": 7,
    "tests": 111,
    "passes": 82,
    "pending": 0,
    "failures": 29,
    "testsRegistered": 111,
    "passPercent": 73.87387387387388,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2024-07-28T09:28:38.515Z",
    "end": "2024-07-28T09:46:44.791Z",
    "duration": 1086276
  },
  "results": [
    {
      "uuid": "fbe27ac1-5b56-4549-80fa-b907f1fd9a75",
      "title": "",
      "fullFile": "cypress\\e2e\\cart.feature",
      "file": "cypress\\e2e\\cart.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
          "title": "Check all element at the cart screen",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the header displays correctly",
              "fullTitle": "Check all element at the cart screen Verify that the header displays correctly",
              "timedOut": null,
              "duration": 3906,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "abb82978-70f8-4ef4-978a-92f9fdc0624a",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to Home Page by clicking the logo/brand at the header",
              "fullTitle": "Check all element at the cart screen Verify that the user can redirect to Home Page by clicking the logo/brand at the header",
              "timedOut": null,
              "duration": 3713,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "92085088-a4b2-4dd1-b90c-36119f96a8b5",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the item in the navbar is highlighted when the user hover",
              "fullTitle": "Check all element at the cart screen Verify that the item in the navbar is highlighted when the user hover",
              "timedOut": null,
              "duration": 2674,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "32be18a2-83f0-4c82-9604-643fd66240b3",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the footer displays correctly at the bottom",
              "fullTitle": "Check all element at the cart screen Verify that the footer displays correctly at the bottom",
              "timedOut": null,
              "duration": 2871,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f2a23dc0-91fe-4ed1-b642-68ac5bb3e7df",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the information on the 3 columns footer displayed accurately",
              "fullTitle": "Check all element at the cart screen Verify that the information on the 3 columns footer displayed accurately",
              "timedOut": null,
              "duration": 2946,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d527d6b1-aee9-4443-84c1-e2ae3836ed05",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user can NOT click any item on the footer",
              "fullTitle": "Check all element at the cart screen Verify user can NOT click any item on the footer",
              "timedOut": null,
              "duration": 2941,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e22635a2-d732-4872-9cb1-798bcbc475e5",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the UI elements display correctly when switch to Cart screen and the cart has a product (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the UI elements display correctly when switch to Cart screen and the cart has a product (example #1)",
              "timedOut": null,
              "duration": 11572,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "30eecc93-7eb4-4ba3-b76a-a6c08a37908f",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the UI elements display correctly when switch to Cart screen and the cart has multiple products (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the UI elements display correctly when switch to Cart screen and the cart has multiple products (example #1)",
              "timedOut": null,
              "duration": 15919,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9d044288-eaa5-4324-91a2-48301ed92ca3",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the UI elements display correctly when switch to Cart screen and the cart has NOT any product",
              "fullTitle": "Check all element at the cart screen Verify that the UI elements display correctly when switch to Cart screen and the cart has NOT any product",
              "timedOut": null,
              "duration": 3121,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "21e8d2ee-ad99-46df-b6ee-87df78b2c3aa",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product in the cart (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product in the cart (example #1)",
              "timedOut": null,
              "duration": 17384,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 28/07/2024', but the text was 'Id: 6886166Amount: 820 USDCard Number: 110Name: TesterDate: 28/6/2024'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 28/07/2024', but the text was 'Id: 6886166Amount: 820 USDCard Number: 110Name: TesterDate: 28/6/2024'\n    at Context.eval (cypress/pages/cartPage.js:217:17)",
                "diff": "- 'Id: 6886166Amount: 820 USDCard Number: 110Name: TesterDate: 28/6/2024'\n+ 'Date: 28/07/2024'\n"
              },
              "uuid": "d23fcef1-7e26-43d4-9752-eefefe65073f",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product in the cart (example #2)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product in the cart (example #2)",
              "timedOut": null,
              "duration": 19936,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 28/07/2024', but the text was 'Id: 9637879Amount: 360 USDCard Number: eg1+Name: ng4+_-+Date: 28/6/2024'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 28/07/2024', but the text was 'Id: 9637879Amount: 360 USDCard Number: eg1+Name: ng4+_-+Date: 28/6/2024'\n    at Context.eval (cypress/pages/cartPage.js:217:17)",
                "diff": "- 'Id: 9637879Amount: 360 USDCard Number: eg1+Name: ng4+_-+Date: 28/6/2024'\n+ 'Date: 28/07/2024'\n"
              },
              "uuid": "316d4bbe-7b45-4bfd-8100-2fe4fd67488b",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product with input full information (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product with input full information (example #1)",
              "timedOut": null,
              "duration": 24139,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 28/07/2024', but the text was 'Id: 6610206Amount: 820 USDCard Number: 0254Name: TesterDate: 28/6/2024'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 28/07/2024', but the text was 'Id: 6610206Amount: 820 USDCard Number: 0254Name: TesterDate: 28/6/2024'\n    at Context.eval (cypress/pages/cartPage.js:217:17)",
                "diff": "- 'Id: 6610206Amount: 820 USDCard Number: 0254Name: TesterDate: 28/6/2024'\n+ 'Date: 28/07/2024'\n"
              },
              "uuid": "1beaae60-c4cb-4d3a-ba8e-4ff8752fd30d",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product with input full information (example #2)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product with input full information (example #2)",
              "timedOut": null,
              "duration": 26256,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 28/07/2024', but the text was 'Id: 2029313Amount: 360 USDCard Number: 21hgfdName: Tester123Date: 28/6/2024'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 28/07/2024', but the text was 'Id: 2029313Amount: 360 USDCard Number: 21hgfdName: Tester123Date: 28/6/2024'\n    at Context.eval (cypress/pages/cartPage.js:217:17)",
                "diff": "- 'Id: 2029313Amount: 360 USDCard Number: 21hgfdName: Tester123Date: 28/6/2024'\n+ 'Date: 28/07/2024'\n"
              },
              "uuid": "7c02f2f0-eb74-4c4d-9da1-63eafd67e911",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase multiple product in the cart (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase multiple product in the cart (example #1)",
              "timedOut": null,
              "duration": 26589,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 28/07/2024', but the text was 'Id: 4701895Amount: 1640 USDCard Number: 110Name: TesterDate: 28/6/2024'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 28/07/2024', but the text was 'Id: 4701895Amount: 1640 USDCard Number: 110Name: TesterDate: 28/6/2024'\n    at Context.eval (cypress/pages/cartPage.js:217:17)",
                "diff": "- 'Id: 4701895Amount: 1640 USDCard Number: 110Name: TesterDate: 28/6/2024'\n+ 'Date: 28/07/2024'\n"
              },
              "uuid": "f69c1e71-01db-4d38-a0e0-3f7400d5e3bb",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase multiple product in the cart (example #2)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase multiple product in the cart (example #2)",
              "timedOut": null,
              "duration": 28680,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 28/07/2024', but the text was 'Id: 4739154Amount: 1470 USDCard Number: e+_-+Name: eng124+_-+Date: 28/6/2024'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<p.lead.text-muted.>' to contain text 'Date: 28/07/2024', but the text was 'Id: 4739154Amount: 1470 USDCard Number: e+_-+Name: eng124+_-+Date: 28/6/2024'\n    at Context.eval (cypress/pages/cartPage.js:217:17)",
                "diff": "- 'Id: 4739154Amount: 1470 USDCard Number: e+_-+Name: eng124+_-+Date: 28/6/2024'\n+ 'Date: 28/07/2024'\n"
              },
              "uuid": "25f4644e-b703-4a67-9a1d-ebb6f75a0aca",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase without any product in the cart (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase without any product in the cart (example #1)",
              "timedOut": null,
              "duration": 12929,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'There are NOT any products in the cart!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'There are NOT any products in the cart!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:306:25)",
                "diff": "- 'Thank you for your purchase!'\n+ 'There are NOT any products in the cart!'\n"
              },
              "uuid": "88014fb9-c53f-49f6-afe5-699b7277fabd",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product in the cart but NOT fill out mandatory fields (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product in the cart but NOT fill out mandatory fields (example #1)",
              "timedOut": null,
              "duration": 20131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b8a04989-fa87-4038-960c-a7ea185a110b",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product in the cart but NOT fill out mandatory fields (example #2)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product in the cart but NOT fill out mandatory fields (example #2)",
              "timedOut": null,
              "duration": 20715,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "502ea14e-f80b-4a66-a646-7e383e65616e",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user purchase a product in the cart but NOT fill out mandatory fields (example #3)",
              "fullTitle": "Check all element at the cart screen Verify that the user purchase a product in the cart but NOT fill out mandatory fields (example #3)",
              "timedOut": null,
              "duration": 18831,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "6b38fd5c-b4dc-4182-89af-8432e527cc5e",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user order a product in the cart but NO click purchase (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user order a product in the cart but NO click purchase (example #1)",
              "timedOut": null,
              "duration": 21842,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d268c875-19d3-4938-9a31-c2e2f794bf9b",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can delete a product in the cart (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user can delete a product in the cart (example #1)",
              "timedOut": null,
              "duration": 23221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c4f3e1b0-8f48-4cce-b95d-8e9208715da3",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can delete a product to blank/empty cart (example #1)",
              "fullTitle": "Check all element at the cart screen Verify that the user can delete a product to blank/empty cart (example #1)",
              "timedOut": null,
              "duration": 15784,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1d59bcf9-40b0-4138-8fc5-791017aa6643",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Name field must NOT 30 characters (example #1)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Name field must NOT 30 characters (example #1)",
              "timedOut": null,
              "duration": 27443,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Name is 30 characters!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Name is 30 characters!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:314:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Name is 30 characters!!'\n"
              },
              "uuid": "cd1c65a4-f2f0-4e8b-bdc0-6e2b314d434a",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Country field must NOT 30 characters (example #1)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Country field must NOT 30 characters (example #1)",
              "timedOut": null,
              "duration": 29815,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Country is 30 characters!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Country is 30 characters!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:325:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Country is 30 characters!!'\n"
              },
              "uuid": "23c2a822-6f86-40b0-886e-164194b5e869",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of City field must NOT 30 characters (example #1)",
              "fullTitle": "Check all element at the cart screen Validation max-length of City field must NOT 30 characters (example #1)",
              "timedOut": null,
              "duration": 31329,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of City is 30 characters!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of City is 30 characters!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:336:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of City is 30 characters!!'\n"
              },
              "uuid": "2e85d821-a941-46bf-a533-3237aa7603f3",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Creditcard field must NOT 19 characters (example #1)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Creditcard field must NOT 19 characters (example #1)",
              "timedOut": null,
              "duration": 31398,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Creditcard is 19 characters!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Creditcard is 19 characters!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:347:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Creditcard is 19 characters!!'\n"
              },
              "uuid": "e9ee3a45-2ae5-410b-b982-7e4e5d406e5c",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Month field must NOT 2 characters and only allow number (example #1)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Month field must NOT 2 characters and only allow number (example #1)",
              "timedOut": null,
              "duration": 32604,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 2 characters and only allow number!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 2 characters and only allow number!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:359:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Month is 2 characters and only allow number!!'\n"
              },
              "uuid": "e813bc57-083b-4a95-b531-50254f5a219c",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Month field must NOT 2 characters and only allow number (example #2)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Month field must NOT 2 characters and only allow number (example #2)",
              "timedOut": null,
              "duration": 32302,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 2 characters and only allow number!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 2 characters and only allow number!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:364:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Month is 2 characters and only allow number!!'\n"
              },
              "uuid": "9fc77e88-168b-4753-bcac-1a9434e83950",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Year field must NOT 4 characters only allow number (example #1)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Year field must NOT 4 characters only allow number (example #1)",
              "timedOut": null,
              "duration": 36825,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 4 characters and only allow number!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 4 characters and only allow number!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:375:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Month is 4 characters and only allow number!!'\n"
              },
              "uuid": "b32dde2d-9092-4af0-b9fc-d79958cf1485",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation max-length of Year field must NOT 4 characters only allow number (example #2)",
              "fullTitle": "Check all element at the cart screen Validation max-length of Year field must NOT 4 characters only allow number (example #2)",
              "timedOut": null,
              "duration": 36071,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 4 characters and only allow number!!', but the text was 'Thank you for your purchase!'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h2>' to contain text 'The maximum length of Month is 4 characters and only allow number!!', but the text was 'Thank you for your purchase!'\n    at Context.eval (cypress/pages/cartPage.js:380:29)",
                "diff": "- 'Thank you for your purchase!'\n+ 'The maximum length of Month is 4 characters and only allow number!!'\n"
              },
              "uuid": "0a158461-05f4-42d7-874f-0e6eb7d13996",
              "parentUUID": "f9a25116-abd0-4fbd-98fd-a926b4c9b4f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "abb82978-70f8-4ef4-978a-92f9fdc0624a",
            "92085088-a4b2-4dd1-b90c-36119f96a8b5",
            "32be18a2-83f0-4c82-9604-643fd66240b3",
            "f2a23dc0-91fe-4ed1-b642-68ac5bb3e7df",
            "d527d6b1-aee9-4443-84c1-e2ae3836ed05",
            "e22635a2-d732-4872-9cb1-798bcbc475e5",
            "30eecc93-7eb4-4ba3-b76a-a6c08a37908f",
            "9d044288-eaa5-4324-91a2-48301ed92ca3",
            "21e8d2ee-ad99-46df-b6ee-87df78b2c3aa",
            "b8a04989-fa87-4038-960c-a7ea185a110b",
            "502ea14e-f80b-4a66-a646-7e383e65616e",
            "6b38fd5c-b4dc-4182-89af-8432e527cc5e",
            "d268c875-19d3-4938-9a31-c2e2f794bf9b",
            "c4f3e1b0-8f48-4cce-b95d-8e9208715da3",
            "1d59bcf9-40b0-4138-8fc5-791017aa6643"
          ],
          "failures": [
            "d23fcef1-7e26-43d4-9752-eefefe65073f",
            "316d4bbe-7b45-4bfd-8100-2fe4fd67488b",
            "1beaae60-c4cb-4d3a-ba8e-4ff8752fd30d",
            "7c02f2f0-eb74-4c4d-9da1-63eafd67e911",
            "f69c1e71-01db-4d38-a0e0-3f7400d5e3bb",
            "25f4644e-b703-4a67-9a1d-ebb6f75a0aca",
            "88014fb9-c53f-49f6-afe5-699b7277fabd",
            "cd1c65a4-f2f0-4e8b-bdc0-6e2b314d434a",
            "23c2a822-6f86-40b0-886e-164194b5e869",
            "2e85d821-a941-46bf-a533-3237aa7603f3",
            "e9ee3a45-2ae5-410b-b982-7e4e5d406e5c",
            "e813bc57-083b-4a95-b531-50254f5a219c",
            "9fc77e88-168b-4753-bcac-1a9434e83950",
            "b32dde2d-9092-4af0-b9fc-d79958cf1485",
            "0a158461-05f4-42d7-874f-0e6eb7d13996"
          ],
          "pending": [],
          "skipped": [],
          "duration": 583887,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "03bd0473-da8a-41bd-b37b-d68d4544d219",
      "title": "",
      "fullFile": "cypress\\e2e\\contact.feature",
      "file": "cypress\\e2e\\contact.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
          "title": "Check Contact pop-up",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the elements display sucess when user open Contact Popup",
              "fullTitle": "Check Contact pop-up Verify that the elements display sucess when user open Contact Popup",
              "timedOut": null,
              "duration": 3598,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "864a8e04-0499-4243-8720-af9a9a80bf76",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can send a message successfully with input required fields (example #1)",
              "fullTitle": "Check Contact pop-up Verify that the user can send a message successfully with input required fields (example #1)",
              "timedOut": null,
              "duration": 6755,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b9748300-67f5-4c11-ae47-847b194d52fc",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can send a message successfully with input full fields (example #1)",
              "fullTitle": "Check Contact pop-up Verify that the user can send a message successfully with input full fields (example #1)",
              "timedOut": null,
              "duration": 6512,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c403058f-4114-41a5-b524-d9b71f30d3a0",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT send a message with input only optional fields (example #1)",
              "fullTitle": "Check Contact pop-up Verify that the user can NOT send a message with input only optional fields (example #1)",
              "timedOut": null,
              "duration": 6758,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'Request to enter Contact Email and Message!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'Request to enter Contact Email and Message!!'\n    at Context.eval (cypress/pages/contactPage.js:89:32)",
                "diff": "- 'Thanks for the message!!'\n+ 'Request to enter Contact Email and Message!!'\n"
              },
              "uuid": "c01cfbaa-d910-4ccd-94cf-512506a4883e",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT send a message without inputting any fields",
              "fullTitle": "Check Contact pop-up Verify that the user can NOT send a message without inputting any fields",
              "timedOut": null,
              "duration": 5458,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'Request to enter Contact Email and Message!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'Request to enter Contact Email and Message!!'\n    at Context.eval (cypress/pages/contactPage.js:89:32)",
                "diff": "- 'Thanks for the message!!'\n+ 'Request to enter Contact Email and Message!!'\n"
              },
              "uuid": "cdcdd5f6-bc80-4af3-a990-3d84c6097a0c",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can close popup by clicking Close button (example #1)",
              "fullTitle": "Check Contact pop-up Verify that the user can close popup by clicking Close button (example #1)",
              "timedOut": null,
              "duration": 5936,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a1295f99-9e95-40f1-ba05-0ee4a547e08e",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can close popup by clicking x icon (example #1)",
              "fullTitle": "Check Contact pop-up Verify that the user can close popup by clicking x icon (example #1)",
              "timedOut": null,
              "duration": 5978,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "644799c5-473e-4909-acbe-de1ae384b700",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Email field must be in the correct email format (example #1)",
              "fullTitle": "Check Contact pop-up Validation the Contact Email field must be in the correct email format (example #1)",
              "timedOut": null,
              "duration": 6919,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'Invalid Email Contact!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'Invalid Email Contact!!'\n    at Context.eval (cypress/pages/contactPage.js:110:36)",
                "diff": "- 'Thanks for the message!!'\n+ 'Invalid Email Contact!!'\n"
              },
              "uuid": "c2c539f4-c310-4148-98b0-e7776527a826",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Email field must be in the correct email format (example #2)",
              "fullTitle": "Check Contact pop-up Validation the Contact Email field must be in the correct email format (example #2)",
              "timedOut": null,
              "duration": 7369,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'Invalid Email Contact!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'Invalid Email Contact!!'\n    at Context.eval (cypress/pages/contactPage.js:110:36)",
                "diff": "- 'Thanks for the message!!'\n+ 'Invalid Email Contact!!'\n"
              },
              "uuid": "f5518dbb-36d5-458a-938d-f47161549379",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Email field must be in the correct email format (example #3)",
              "fullTitle": "Check Contact pop-up Validation the Contact Email field must be in the correct email format (example #3)",
              "timedOut": null,
              "duration": 6712,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'Invalid Email Contact!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'Invalid Email Contact!!'\n    at Context.eval (cypress/pages/contactPage.js:110:36)",
                "diff": "- 'Thanks for the message!!'\n+ 'Invalid Email Contact!!'\n"
              },
              "uuid": "078aba4a-dbed-48a2-b3a3-3d9f649f1a92",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Email field must NOT exceed 30 characters (example #1)",
              "fullTitle": "Check Contact pop-up Validation the Contact Email field must NOT exceed 30 characters (example #1)",
              "timedOut": null,
              "duration": 7104,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'The maximum length of Contact Email is 30 characters!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'The maximum length of Contact Email is 30 characters!!'\n    at Context.eval (cypress/pages/contactPage.js:124:36)",
                "diff": "- 'Thanks for the message!!'\n+ 'The maximum length of Contact Email is 30 characters!!'\n"
              },
              "uuid": "961ee051-348b-4bb2-ab38-8ae102713db7",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Name field is free text (example #1)",
              "fullTitle": "Check Contact pop-up Validation the Contact Name field is free text (example #1)",
              "timedOut": null,
              "duration": 6851,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "befcedbf-a52a-481c-964a-3845ad66204d",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Name field is free text (example #2)",
              "fullTitle": "Check Contact pop-up Validation the Contact Name field is free text (example #2)",
              "timedOut": null,
              "duration": 7230,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1cdeb547-fd92-4b93-b574-858062688548",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Name field is free text (example #3)",
              "fullTitle": "Check Contact pop-up Validation the Contact Name field is free text (example #3)",
              "timedOut": null,
              "duration": 6817,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "19ca68cb-00b6-433b-abc4-701f133f0c18",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Name field is free text (example #4)",
              "fullTitle": "Check Contact pop-up Validation the Contact Name field is free text (example #4)",
              "timedOut": null,
              "duration": 6824,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ea998956-5998-4781-aa5c-acac78361ea8",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Contact Name field must NOT exceed 25 characters (example #1)",
              "fullTitle": "Check Contact pop-up Validation the Contact Name field must NOT exceed 25 characters (example #1)",
              "timedOut": null,
              "duration": 7265,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'The maximum length of Contact Name is 25 characters!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'The maximum length of Contact Name is 25 characters!!'\n    at Context.eval (cypress/pages/contactPage.js:138:36)",
                "diff": "- 'Thanks for the message!!'\n+ 'The maximum length of Contact Name is 25 characters!!'\n"
              },
              "uuid": "236446c0-b96d-4514-9b44-0849140f553e",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Message field is free text (example #1)",
              "fullTitle": "Check Contact pop-up Validation the Message field is free text (example #1)",
              "timedOut": null,
              "duration": 7419,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "876c3420-4142-40ef-829f-38944ee13216",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Message field must NOT exceed 25 characters (example #1)",
              "fullTitle": "Check Contact pop-up Validation the Message field must NOT exceed 25 characters (example #1)",
              "timedOut": null,
              "duration": 8338,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'Thanks for the message!!' to equal 'Maximum length of Message is 100 characters!!'",
                "estack": "AssertionError: expected 'Thanks for the message!!' to equal 'Maximum length of Message is 100 characters!!'\n    at Context.eval (cypress/pages/contactPage.js:152:36)",
                "diff": "- 'Thanks for the message!!'\n+ 'Maximum length of Message is 100 characters!!'\n"
              },
              "uuid": "078f53e2-3f3f-4575-8e42-afd10b15daad",
              "parentUUID": "1beb28e2-e0ea-4546-884f-5349b9cd8f0b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "864a8e04-0499-4243-8720-af9a9a80bf76",
            "b9748300-67f5-4c11-ae47-847b194d52fc",
            "c403058f-4114-41a5-b524-d9b71f30d3a0",
            "a1295f99-9e95-40f1-ba05-0ee4a547e08e",
            "644799c5-473e-4909-acbe-de1ae384b700",
            "befcedbf-a52a-481c-964a-3845ad66204d",
            "1cdeb547-fd92-4b93-b574-858062688548",
            "19ca68cb-00b6-433b-abc4-701f133f0c18",
            "ea998956-5998-4781-aa5c-acac78361ea8",
            "876c3420-4142-40ef-829f-38944ee13216"
          ],
          "failures": [
            "c01cfbaa-d910-4ccd-94cf-512506a4883e",
            "cdcdd5f6-bc80-4af3-a990-3d84c6097a0c",
            "c2c539f4-c310-4148-98b0-e7776527a826",
            "f5518dbb-36d5-458a-938d-f47161549379",
            "078aba4a-dbed-48a2-b3a3-3d9f649f1a92",
            "961ee051-348b-4bb2-ab38-8ae102713db7",
            "236446c0-b96d-4514-9b44-0849140f553e",
            "078f53e2-3f3f-4575-8e42-afd10b15daad"
          ],
          "pending": [],
          "skipped": [],
          "duration": 119843,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0895834c-3c2a-4e70-9ad2-270ee14db630",
      "title": "",
      "fullFile": "cypress\\e2e\\homepage.feature",
      "file": "cypress\\e2e\\homepage.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c019ff99-ce20-40be-b242-1af1501758f5",
          "title": "Check all element at home page screen",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the header displays correctly",
              "fullTitle": "Check all element at home page screen Verify that the header displays correctly",
              "timedOut": null,
              "duration": 2544,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "385cd784-2375-490d-9ce0-f210b13e2992",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to Home Page by clicking the logo/brand at the header",
              "fullTitle": "Check all element at home page screen Verify that the user can redirect to Home Page by clicking the logo/brand at the header",
              "timedOut": null,
              "duration": 3057,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "52b1c214-0cd2-431e-90df-102031c639ce",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the item in the navbar is highlighted when the user hover",
              "fullTitle": "Check all element at home page screen Verify that the item in the navbar is highlighted when the user hover",
              "timedOut": null,
              "duration": 1878,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7c16c10b-ef1a-4feb-aca3-7d4d747f48ae",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the footer displays correctly at the bottom",
              "fullTitle": "Check all element at home page screen Verify that the footer displays correctly at the bottom",
              "timedOut": null,
              "duration": 1741,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c08f8729-0d8c-4276-b44c-4fdef2605265",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the information on the 3 columns footer displayed accurately",
              "fullTitle": "Check all element at home page screen Verify that the information on the 3 columns footer displayed accurately",
              "timedOut": null,
              "duration": 1940,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "aa704126-3577-40e9-a697-0e72a0b322fa",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user can NOT click any item on the footer",
              "fullTitle": "Check all element at home page screen Verify user can NOT click any item on the footer",
              "timedOut": null,
              "duration": 2040,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "cafeebef-689f-47f4-a1c9-01cddfb13b30",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the slideshow displays correctly",
              "fullTitle": "Check all element at home page screen Verify that the slideshow displays correctly",
              "timedOut": null,
              "duration": 1563,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "2018d5cf-474c-4c76-bcf1-985729e9f318",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the slideshow displays the 3 products sequentially automatically",
              "fullTitle": "Check all element at home page screen Verify that the slideshow displays the 3 products sequentially automatically",
              "timedOut": null,
              "duration": 12983,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9bca47ab-f317-44d6-a7be-25cf256c2a1a",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the next product at slideshow by clicking a next icon",
              "fullTitle": "Check all element at home page screen Verify that the user can view the next product at slideshow by clicking a next icon",
              "timedOut": null,
              "duration": 3410,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "fb7b6e18-630f-4b7d-b909-f64e39147567",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the previous product at slideshow by clicking a previous icon",
              "fullTitle": "Check all element at home page screen Verify that the user can view the previous product at slideshow by clicking a previous icon",
              "timedOut": null,
              "duration": 2747,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "06350c12-61ed-4efb-9a7b-d92b614ad03a",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the product at slideshow by clicking a carousel",
              "fullTitle": "Check all element at home page screen Verify that the user can view the product at slideshow by clicking a carousel",
              "timedOut": null,
              "duration": 1915,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "5cf7bfa0-9642-4292-9873-10dcf47b297e",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that categories menu displays correctly",
              "fullTitle": "Check all element at home page screen Verify that categories menu displays correctly",
              "timedOut": null,
              "duration": 1994,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "57aa77b4-0772-4ded-8313-2cd65ebd50c5",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the specific list of products by clicking a Group Product in a Categories menu (example #1)",
              "fullTitle": "Check all element at home page screen Verify that the user can view the specific list of products by clicking a Group Product in a Categories menu (example #1)",
              "timedOut": null,
              "duration": 5707,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9d0c5142-08d3-40eb-a439-87a484959f3e",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the specific list of products by clicking a Group Product in a Categories menu (example #2)",
              "fullTitle": "Check all element at home page screen Verify that the user can view the specific list of products by clicking a Group Product in a Categories menu (example #2)",
              "timedOut": null,
              "duration": 4895,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a628907d-54c9-47fd-b673-0e999fe5c55a",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the specific list of products by clicking a Group Product in a Categories menu (example #3)",
              "fullTitle": "Check all element at home page screen Verify that the user can view the specific list of products by clicking a Group Product in a Categories menu (example #3)",
              "timedOut": null,
              "duration": 4897,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7c5792ae-890f-4a2e-9f7b-b2b393b977c8",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the whole list of products by clicking Category menu (example #1)",
              "fullTitle": "Check all element at home page screen Verify that the user can view the whole list of products by clicking Category menu (example #1)",
              "timedOut": null,
              "duration": 6748,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "24d55149-e889-47e9-87f0-58e51cdc95b4",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the whole list of products by clicking Category menu (example #2)",
              "fullTitle": "Check all element at home page screen Verify that the user can view the whole list of products by clicking Category menu (example #2)",
              "timedOut": null,
              "duration": 6962,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3d573a2c-fecb-458b-aa3a-f047d52bdcd0",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can view the whole list of products by clicking Category menu (example #3)",
              "fullTitle": "Check all element at home page screen Verify that the user can view the whole list of products by clicking Category menu (example #3)",
              "timedOut": null,
              "duration": 6438,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "960e5624-eb0a-40c0-8447-ff9e5c70ba00",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the list of product card display correctly",
              "fullTitle": "Check all element at home page screen Verify that the list of product card display correctly",
              "timedOut": null,
              "duration": 2287,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7799815d-e421-4965-8cdb-82fcb0dc6713",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the information of the product card is display correctly",
              "fullTitle": "Check all element at home page screen Verify that the information of the product card is display correctly",
              "timedOut": null,
              "duration": 3201,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "346add9a-d907-440c-8c42-2f6e6d97b3c4",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the title of the product card is underlined when the user hover",
              "fullTitle": "Check all element at home page screen Verify that the title of the product card is underlined when the user hover",
              "timedOut": null,
              "duration": 1910,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7f2d8b86-0de8-45b4-9067-322a6b7006ea",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to an Information product screen when clicking a photo of the product (example #1)",
              "fullTitle": "Check all element at home page screen Verify that the user can redirect to an Information product screen when clicking a photo of the product (example #1)",
              "timedOut": null,
              "duration": 8068,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "18ab7ade-178d-4af5-b4ae-7479de7d10b6",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to an Information product screen when clicking a photo of the product (example #2)",
              "fullTitle": "Check all element at home page screen Verify that the user can redirect to an Information product screen when clicking a photo of the product (example #2)",
              "timedOut": null,
              "duration": 8118,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "086afa5a-0eaf-423d-b5ce-5b11cc046d48",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to an Information product screen when clicking a title of the product (example #1)",
              "fullTitle": "Check all element at home page screen Verify that the user can redirect to an Information product screen when clicking a title of the product (example #1)",
              "timedOut": null,
              "duration": 8336,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "07abd240-86a5-4123-8ed9-b50d065024bd",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to an Information product screen when clicking a title of the product (example #2)",
              "fullTitle": "Check all element at home page screen Verify that the user can redirect to an Information product screen when clicking a title of the product (example #2)",
              "timedOut": null,
              "duration": 8225,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "608e61da-8509-499f-9835-07a4a08f668d",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the elements of pagination display success",
              "fullTitle": "Check all element at home page screen Verify the elements of pagination display success",
              "timedOut": null,
              "duration": 6288,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<button#prev2.page-link>' not to be 'visible'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<button#prev2.page-link>' not to be 'visible'\n    at Function.eval [as checkPreBtnNotBeVisible] (cypress/pages/homePage.js:255:25)\n    at Context.eval (cypress/e2e/steps/homepage.steps.js:114:13)\n    at Context.resolveAndRunStepDefinition (node_modules/cypress-cucumber-preprocessor/lib/resolveStepDefinition.js:193:0)\n    at Context.eval (node_modules/cypress-cucumber-preprocessor/lib/createTestFromScenario.js:27:0)",
                "diff": null
              },
              "uuid": "e1acc245-5eab-4fba-8e57-cc839876dc67",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the user can view next or previous page with whole products by cliking Next/Previous button",
              "fullTitle": "Check all element at home page screen Verify the user can view next or previous page with whole products by cliking Next/Previous button",
              "timedOut": null,
              "duration": 13726,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<a.hrefch>' to have text 'Samsung galaxy s6', but the text was 'Nokia lumia 1520'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<a.hrefch>' to have text 'Samsung galaxy s6', but the text was 'Nokia lumia 1520'\n    at Context.eval (cypress/pages/homePage.js:169:49)",
                "diff": "- 'Nokia lumia 1520'\n+ 'Samsung galaxy s6'\n"
              },
              "uuid": "7d10f7f9-caf4-4189-b4c6-f87252c56639",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the elements of pagination must be hidden when number of products on a page is less thane 10 (example #1)",
              "fullTitle": "Check all element at home page screen Verify the elements of pagination must be hidden when number of products on a page is less thane 10 (example #1)",
              "timedOut": null,
              "duration": 10023,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<button#next2.page-link>' not to be 'visible'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<button#next2.page-link>' not to be 'visible'\n    at Function.eval [as checkNextBtnNotBeVisible] (cypress/pages/homePage.js:258:25)\n    at Context.eval (cypress/e2e/steps/homepage.steps.js:110:13)\n    at Context.resolveAndRunStepDefinition (node_modules/cypress-cucumber-preprocessor/lib/resolveStepDefinition.js:193:0)\n    at Context.eval (node_modules/cypress-cucumber-preprocessor/lib/createTestFromScenario.js:27:0)",
                "diff": null
              },
              "uuid": "3ddfa16e-1d3a-4d19-8f47-baac1472cd83",
              "parentUUID": "c019ff99-ce20-40be-b242-1af1501758f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "385cd784-2375-490d-9ce0-f210b13e2992",
            "52b1c214-0cd2-431e-90df-102031c639ce",
            "7c16c10b-ef1a-4feb-aca3-7d4d747f48ae",
            "c08f8729-0d8c-4276-b44c-4fdef2605265",
            "aa704126-3577-40e9-a697-0e72a0b322fa",
            "cafeebef-689f-47f4-a1c9-01cddfb13b30",
            "2018d5cf-474c-4c76-bcf1-985729e9f318",
            "9bca47ab-f317-44d6-a7be-25cf256c2a1a",
            "fb7b6e18-630f-4b7d-b909-f64e39147567",
            "06350c12-61ed-4efb-9a7b-d92b614ad03a",
            "5cf7bfa0-9642-4292-9873-10dcf47b297e",
            "57aa77b4-0772-4ded-8313-2cd65ebd50c5",
            "9d0c5142-08d3-40eb-a439-87a484959f3e",
            "a628907d-54c9-47fd-b673-0e999fe5c55a",
            "7c5792ae-890f-4a2e-9f7b-b2b393b977c8",
            "24d55149-e889-47e9-87f0-58e51cdc95b4",
            "3d573a2c-fecb-458b-aa3a-f047d52bdcd0",
            "960e5624-eb0a-40c0-8447-ff9e5c70ba00",
            "7799815d-e421-4965-8cdb-82fcb0dc6713",
            "346add9a-d907-440c-8c42-2f6e6d97b3c4",
            "7f2d8b86-0de8-45b4-9067-322a6b7006ea",
            "18ab7ade-178d-4af5-b4ae-7479de7d10b6",
            "086afa5a-0eaf-423d-b5ce-5b11cc046d48",
            "07abd240-86a5-4123-8ed9-b50d065024bd",
            "608e61da-8509-499f-9835-07a4a08f668d"
          ],
          "failures": [
            "e1acc245-5eab-4fba-8e57-cc839876dc67",
            "7d10f7f9-caf4-4189-b4c6-f87252c56639",
            "3ddfa16e-1d3a-4d19-8f47-baac1472cd83"
          ],
          "pending": [],
          "skipped": [],
          "duration": 143641,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "98ec6f9d-9b51-488d-b45b-56f6458feb16",
      "title": "",
      "fullFile": "cypress\\e2e\\inforProduct.feature",
      "file": "cypress\\e2e\\inforProduct.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
          "title": "Check all element at the Information Product screen",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the header displays correctly",
              "fullTitle": "Check all element at the Information Product screen Verify that the header displays correctly",
              "timedOut": null,
              "duration": 2500,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d2bf940c-c87e-45cf-9871-35fba0ae3494",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can redirect to Home Page by clicking the logo/brand at the header",
              "fullTitle": "Check all element at the Information Product screen Verify that the user can redirect to Home Page by clicking the logo/brand at the header",
              "timedOut": null,
              "duration": 3251,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "469ea481-bb28-45df-a26b-65957986f013",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the item in the navbar is highlighted when the user hover",
              "fullTitle": "Check all element at the Information Product screen Verify that the item in the navbar is highlighted when the user hover",
              "timedOut": null,
              "duration": 1947,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "0d4f0b60-4d96-4e4c-846d-e2412db913e3",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the footer displays correctly at the bottom",
              "fullTitle": "Check all element at the Information Product screen Verify that the footer displays correctly at the bottom",
              "timedOut": null,
              "duration": 1823,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7758a4d5-a81b-48df-8858-c4b1a8d7a6c1",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the information on the 3 columns footer displayed accurately",
              "fullTitle": "Check all element at the Information Product screen Verify that the information on the 3 columns footer displayed accurately",
              "timedOut": null,
              "duration": 1879,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "cd48a9b2-91a2-4fb2-8f9e-e573a726c44e",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user can NOT click any item on the footer",
              "fullTitle": "Check all element at the Information Product screen Verify user can NOT click any item on the footer",
              "timedOut": null,
              "duration": 1867,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ec80f0e7-70c1-4e9b-8cd2-307b0d4e2130",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the screen displays correctly UI without ant broken elements (example #1)",
              "fullTitle": "Check all element at the Information Product screen Verify the screen displays correctly UI without ant broken elements (example #1)",
              "timedOut": null,
              "duration": 9207,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected <ol.carousel-indicators> not to exist in the DOM, but it was continuously found.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected <ol.carousel-indicators> not to exist in the DOM, but it was continuously found.\n    at Function.eval [as verifyElementsDisplay] (cypress/pages/inforProductPage.js:22:25)\n    at Context.eval (cypress/e2e/steps/inforProduct.steps.js:82:21)\n    at Context.resolveAndRunStepDefinition (node_modules/cypress-cucumber-preprocessor/lib/resolveStepDefinition.js:193:0)\n    at Context.eval (node_modules/cypress-cucumber-preprocessor/lib/createTestFromScenario.js:27:0)",
                "diff": null
              },
              "uuid": "36f05665-8392-4902-a58e-34bf419da077",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the elements display correctly at Information Product when user select a product (example #1)",
              "fullTitle": "Check all element at the Information Product screen Verify that the elements display correctly at Information Product when user select a product (example #1)",
              "timedOut": null,
              "duration": 7115,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "65555c40-b285-4295-9f58-df70ddd4579d",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the elements display correctly at Information Product when user select a product (example #2)",
              "fullTitle": "Check all element at the Information Product screen Verify that the elements display correctly at Information Product when user select a product (example #2)",
              "timedOut": null,
              "duration": 6276,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b3484cc0-8b90-4037-9e14-cc7706f4a675",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can add a product to a cart successfully (example #1)",
              "fullTitle": "Check all element at the Information Product screen Verify that the user can add a product to a cart successfully (example #1)",
              "timedOut": null,
              "duration": 11517,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "bad78964-2ede-40e1-af91-17af55ff38d2",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can add a product to a cart successfully (example #2)",
              "fullTitle": "Check all element at the Information Product screen Verify that the user can add a product to a cart successfully (example #2)",
              "timedOut": null,
              "duration": 10991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "26c620b4-b7f5-4a49-bf2f-673b8ce32ee5",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the the user can add product to a many times successfully (example #1)",
              "fullTitle": "Check all element at the Information Product screen Verify the the user can add product to a many times successfully (example #1)",
              "timedOut": null,
              "duration": 13563,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a0f51aeb-d797-424a-9a2a-ecf9f6d5e6be",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the the user can add product to a many times successfully (example #2)",
              "fullTitle": "Check all element at the Information Product screen Verify the the user can add product to a many times successfully (example #2)",
              "timedOut": null,
              "duration": 12622,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "5dd1b79e-82ab-422d-b7e9-1d293506ed61",
              "parentUUID": "cc18c3b4-add1-40cc-925c-8babbdef0a8a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2bf940c-c87e-45cf-9871-35fba0ae3494",
            "469ea481-bb28-45df-a26b-65957986f013",
            "0d4f0b60-4d96-4e4c-846d-e2412db913e3",
            "7758a4d5-a81b-48df-8858-c4b1a8d7a6c1",
            "cd48a9b2-91a2-4fb2-8f9e-e573a726c44e",
            "ec80f0e7-70c1-4e9b-8cd2-307b0d4e2130",
            "65555c40-b285-4295-9f58-df70ddd4579d",
            "b3484cc0-8b90-4037-9e14-cc7706f4a675",
            "bad78964-2ede-40e1-af91-17af55ff38d2",
            "26c620b4-b7f5-4a49-bf2f-673b8ce32ee5",
            "a0f51aeb-d797-424a-9a2a-ecf9f6d5e6be",
            "5dd1b79e-82ab-422d-b7e9-1d293506ed61"
          ],
          "failures": [
            "36f05665-8392-4902-a58e-34bf419da077"
          ],
          "pending": [],
          "skipped": [],
          "duration": 84558,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1d9c5cd2-4d1e-4a64-9bf5-11e6577b5162",
      "title": "",
      "fullFile": "cypress\\e2e\\login.feature",
      "file": "cypress\\e2e\\login.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1eb07348-98b3-48db-857b-ea361280a5e9",
          "title": "Check Log in popup",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the elements display sucess when user open Login Popup",
              "fullTitle": "Check Log in popup Verify that the elements display sucess when user open Login Popup",
              "timedOut": null,
              "duration": 3530,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b0653576-3942-41ca-87dd-3fad806dccec",
              "parentUUID": "1eb07348-98b3-48db-857b-ea361280a5e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can login successfully with valid username and password (example #1)",
              "fullTitle": "Check Log in popup Verify that the user can login successfully with valid username and password (example #1)",
              "timedOut": null,
              "duration": 7189,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "6fb78430-6587-4124-b83f-05419c4dad7e",
              "parentUUID": "1eb07348-98b3-48db-857b-ea361280a5e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can login successfully with valid username and password (example #2)",
              "fullTitle": "Check Log in popup Verify that the user can login successfully with valid username and password (example #2)",
              "timedOut": null,
              "duration": 7634,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "de94c3f6-a6c7-4e63-838b-35a3dcef3eca",
              "parentUUID": "1eb07348-98b3-48db-857b-ea361280a5e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT login with username is NOT existed (example #1)",
              "fullTitle": "Check Log in popup Verify that the user can NOT login with username is NOT existed (example #1)",
              "timedOut": null,
              "duration": 5449,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "773b0896-7d8d-46c2-9144-c9430d8897c6",
              "parentUUID": "1eb07348-98b3-48db-857b-ea361280a5e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT login with password is invalid (example #1)",
              "fullTitle": "Check Log in popup Verify that the user can NOT login with password is invalid (example #1)",
              "timedOut": null,
              "duration": 5646,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "311cf011-6fea-42b3-a5d4-f84c836f4608",
              "parentUUID": "1eb07348-98b3-48db-857b-ea361280a5e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT login with empty/blank username or password (example #1)",
              "fullTitle": "Check Log in popup Verify that the user can NOT login with empty/blank username or password (example #1)",
              "timedOut": null,
              "duration": 5534,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "71288934-d16f-4897-b608-8d0f076a794b",
              "parentUUID": "1eb07348-98b3-48db-857b-ea361280a5e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT login with empty/blank username or password (example #2)",
              "fullTitle": "Check Log in popup Verify that the user can NOT login with empty/blank username or password (example #2)",
              "timedOut": null,
              "duration": 5495,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e2b8611c-6841-4042-8c9f-7c25be594f63",
              "parentUUID": "1eb07348-98b3-48db-857b-ea361280a5e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT login with empty/blank username or password (example #3)",
              "fullTitle": "Check Log in popup Verify that the user can NOT login with empty/blank username or password (example #3)",
              "timedOut": null,
              "duration": 5219,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e8e46304-54fc-43e5-a931-1410b5cce902",
              "parentUUID": "1eb07348-98b3-48db-857b-ea361280a5e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can login successfully with valid username and password (example #1)",
              "fullTitle": "Check Log in popup Verify that the user can login successfully with valid username and password (example #1)",
              "timedOut": null,
              "duration": 8271,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7d5421bc-0985-4564-b735-a7ecb9cc3b70",
              "parentUUID": "1eb07348-98b3-48db-857b-ea361280a5e9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0653576-3942-41ca-87dd-3fad806dccec",
            "6fb78430-6587-4124-b83f-05419c4dad7e",
            "de94c3f6-a6c7-4e63-838b-35a3dcef3eca",
            "773b0896-7d8d-46c2-9144-c9430d8897c6",
            "311cf011-6fea-42b3-a5d4-f84c836f4608",
            "71288934-d16f-4897-b608-8d0f076a794b",
            "e2b8611c-6841-4042-8c9f-7c25be594f63",
            "e8e46304-54fc-43e5-a931-1410b5cce902",
            "7d5421bc-0985-4564-b735-a7ecb9cc3b70"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 53967,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b5504f2e-1792-43f5-b05c-5ac0d6a4b32e",
      "title": "",
      "fullFile": "cypress\\e2e\\signup.feature",
      "file": "cypress\\e2e\\signup.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "42c1349f-9906-4408-9764-79593a4c2af3",
          "title": "Check Sign up popup",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the elements display sucess when user open Signup Popup",
              "fullTitle": "Check Sign up popup Verify that the elements display sucess when user open Signup Popup",
              "timedOut": null,
              "duration": 3470,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "710aae7e-bf51-45b8-82f7-23a6d1ac9102",
              "parentUUID": "42c1349f-9906-4408-9764-79593a4c2af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can Signup successfully with valid username and password (example #1)",
              "fullTitle": "Check Sign up popup Verify that the user can Signup successfully with valid username and password (example #1)",
              "timedOut": null,
              "duration": 5719,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a978c35f-fb97-420a-a193-7f064d2277fd",
              "parentUUID": "42c1349f-9906-4408-9764-79593a4c2af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT Signup with username is existed (example #1)",
              "fullTitle": "Check Sign up popup Verify that the user can NOT Signup with username is existed (example #1)",
              "timedOut": null,
              "duration": 5625,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4714e70b-565b-46e5-b2e0-1f6eca2f85c2",
              "parentUUID": "42c1349f-9906-4408-9764-79593a4c2af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT Signup with empty/blank username or password (example #1)",
              "fullTitle": "Check Sign up popup Verify that the user can NOT Signup with empty/blank username or password (example #1)",
              "timedOut": null,
              "duration": 5459,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e18ef857-50fe-4b4e-bd7f-9489572b9508",
              "parentUUID": "42c1349f-9906-4408-9764-79593a4c2af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT Signup with empty/blank username or password (example #2)",
              "fullTitle": "Check Sign up popup Verify that the user can NOT Signup with empty/blank username or password (example #2)",
              "timedOut": null,
              "duration": 5423,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3aa37dd5-fd27-49a7-a1ad-5304bb8f14a5",
              "parentUUID": "42c1349f-9906-4408-9764-79593a4c2af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can NOT Signup with empty/blank username or password (example #3)",
              "fullTitle": "Check Sign up popup Verify that the user can NOT Signup with empty/blank username or password (example #3)",
              "timedOut": null,
              "duration": 5275,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b176a6d7-a756-4af9-a65c-9cdfb0d6addf",
              "parentUUID": "42c1349f-9906-4408-9764-79593a4c2af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the Username field must NOT exceed 20 characters (example #1)",
              "fullTitle": "Check Sign up popup Validation the Username field must NOT exceed 20 characters (example #1)",
              "timedOut": null,
              "duration": 5816,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'This user already exist.' to equal 'Maximum length of Username is 20 characters!'",
                "estack": "AssertionError: expected 'This user already exist.' to equal 'Maximum length of Username is 20 characters!'\n    at Context.eval (cypress/pages/signupPage.js:75:36)",
                "diff": "- 'This user already exist.'\n+ 'Maximum length of Username is 20 characters!'\n"
              },
              "uuid": "a71f9525-604d-48c7-af44-4ef621922f65",
              "parentUUID": "42c1349f-9906-4408-9764-79593a4c2af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation the password field must NOT exceed 8 characters (example #1)",
              "fullTitle": "Check Sign up popup Validation the password field must NOT exceed 8 characters (example #1)",
              "timedOut": null,
              "duration": 5898,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: expected 'This user already exist.' to equal 'Maximum length of password is 8 characters!'",
                "estack": "AssertionError: expected 'This user already exist.' to equal 'Maximum length of password is 8 characters!'\n    at Context.eval (cypress/pages/signupPage.js:87:36)",
                "diff": "- 'This user already exist.'\n+ 'Maximum length of password is 8 characters!'\n"
              },
              "uuid": "48dab5d3-ef9f-40ec-8680-dc66604229e1",
              "parentUUID": "42c1349f-9906-4408-9764-79593a4c2af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can close Signup Popup by clicking Close button (example #1)",
              "fullTitle": "Check Sign up popup Verify that the user can close Signup Popup by clicking Close button (example #1)",
              "timedOut": null,
              "duration": 5728,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "246f7728-1774-4f3e-96ac-b83784b91b1b",
              "parentUUID": "42c1349f-9906-4408-9764-79593a4c2af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can close Signup Popup by clicking x icon (example #1)",
              "fullTitle": "Check Sign up popup Verify that the user can close Signup Popup by clicking x icon (example #1)",
              "timedOut": null,
              "duration": 5695,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "0d5f08c8-9508-4117-8f89-c66784573ff8",
              "parentUUID": "42c1349f-9906-4408-9764-79593a4c2af3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "710aae7e-bf51-45b8-82f7-23a6d1ac9102",
            "a978c35f-fb97-420a-a193-7f064d2277fd",
            "4714e70b-565b-46e5-b2e0-1f6eca2f85c2",
            "e18ef857-50fe-4b4e-bd7f-9489572b9508",
            "3aa37dd5-fd27-49a7-a1ad-5304bb8f14a5",
            "b176a6d7-a756-4af9-a65c-9cdfb0d6addf",
            "246f7728-1774-4f3e-96ac-b83784b91b1b",
            "0d5f08c8-9508-4117-8f89-c66784573ff8"
          ],
          "failures": [
            "a71f9525-604d-48c7-af44-4ef621922f65",
            "48dab5d3-ef9f-40ec-8680-dc66604229e1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 54108,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "06c531a1-94ca-4bda-9661-43a45c1b82f9",
      "title": "",
      "fullFile": "cypress\\e2e\\aboutus.feature",
      "file": "cypress\\e2e\\aboutus.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "165eacfc-9726-4cc4-9e5d-fe3753eeeaff",
          "title": "Check About us pop-up",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the elements display sucess when user open About us Popup",
              "fullTitle": "Check About us pop-up Verify that the elements display sucess when user open About us Popup",
              "timedOut": null,
              "duration": 3953,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "444d40ec-1dc5-4550-a021-3d5335967cae",
              "parentUUID": "165eacfc-9726-4cc4-9e5d-fe3753eeeaff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can close pop-up by click Close button",
              "fullTitle": "Check About us pop-up Verify that the user can close pop-up by click Close button",
              "timedOut": null,
              "duration": 4300,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "0ff4037f-8893-4a73-933b-033fd188ad7c",
              "parentUUID": "165eacfc-9726-4cc4-9e5d-fe3753eeeaff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the user can close pop-up by click x icon",
              "fullTitle": "Check About us pop-up Verify that the user can close pop-up by click x icon",
              "timedOut": null,
              "duration": 4233,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7c4fc348-fd8e-461c-8efd-1649aec50401",
              "parentUUID": "165eacfc-9726-4cc4-9e5d-fe3753eeeaff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "444d40ec-1dc5-4550-a021-3d5335967cae",
            "0ff4037f-8893-4a73-933b-033fd188ad7c",
            "7c4fc348-fd8e-461c-8efd-1649aec50401"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12486,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": false,
        "reportDir": "result",
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}